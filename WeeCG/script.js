// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ HTML-–µ–ª–µ–º–µ–Ω—Ç–∏
const scoreElement = document.getElementById('score');
const clickButton = document.getElementById('clickButton');
const upgrade1Button = document.getElementById('upgrade1');
const upgrade1CostElement = document.getElementById('upgrade1Cost');
const upgrade2Button = document.getElementById('upgrade2');
const upgrade2CostElement = document.getElementById('upgrade2Cost');
const debugUserIdElement = document.getElementById('debugUserId');

const loadingScreen = document.getElementById('loading-screen');
const gameScreen = document.getElementById('game-screen');
const progressBarFill = document.getElementById('progressBarFill');
const loadingText = document.getElementById('loadingText');

const mainBalanceElement = document.getElementById('mainBalance');
const energyBarFill = document.getElementById('energyBarFill');
const energyText = document.getElementById('energyText');
const coinImage = document.querySelector('.coin-image'); // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–æ–Ω–µ—Ç–∏

// –Ü–≥—Ä–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ
let score = 0; // –ú–æ–Ω–µ—Ç–∏ –¥–ª—è –∫–ª—ñ–∫—ñ–≤
let mainBalance = 0; // –û—Å–Ω–æ–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å (–Ω–æ–≤–∞ –≤–∞–ª—é—Ç–∞)
let clickPower = 1;
let autoClickPower = 0;
let upgrade1Cost = 100;
let upgrade2Cost = 500;
let telegramUserId = null;

let currentEnergy = 1000; // –ü–æ—Ç–æ—á–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è –∫–ª—ñ–∫—ñ–≤
const maxEnergy = 1000;   // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è
const energyRechargeRate = 100; // –ï–Ω–µ—Ä–≥—ñ—è –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è –Ω–∞ 100 –æ–¥–∏–Ω–∏—Ü—å –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
const energyRechargeIntervalTime = 5000; // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –º—Å (5 —Å–µ–∫—É–Ω–¥)

let autoClickInterval;
let energyRechargeInterval;

const coinClickSound = new Audio('coin_click.mp3');
coinClickSound.volume = 0.5;

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ—á–æ–∫ —Ç–∞ –±–∞–ª–∞–Ω—Å—ñ–≤
function updateDisplay() {
    scoreElement.textContent = Math.floor(score);
    mainBalanceElement.textContent = Math.floor(mainBalance);
    checkUpgradeAvailability();
    updateEnergyDisplay();
}

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
function updateEnergyDisplay() {
    const energyPercentage = (currentEnergy / maxEnergy) * 100;
    energyBarFill.style.width = `${energyPercentage}%`;

    let energyIcon = 'üîã';
    if (currentEnergy <= 0) {
        energyIcon = 'ü™´'; // –†–æ–∑—Ä—è–¥–∂–µ–Ω–∞ –±–∞—Ç–∞—Ä–µ—è
    } else if (currentEnergy < maxEnergy * 0.2) {
        energyIcon = 'üîã'; // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—É —ñ–∫–æ–Ω–∫—É –¥–ª—è –Ω–∏–∑—å–∫–æ–≥–æ –∑–∞—Ä—è–¥—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    }

    energyText.textContent = `${energyIcon} ${Math.floor(currentEnergy)} / ${maxEnergy}`;

    // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è –≤–∏—á–µ—Ä–ø–∞–Ω–∞, –≤–∏–º–∏–∫–∞—î–º–æ –∫–ª—ñ–∫
    clickButton.disabled = currentEnergy <= 0;
    clickButton.style.opacity = currentEnergy <= 0 ? 0.7 : 1;
    clickButton.style.cursor = currentEnergy <= 0 ? 'not-allowed' : 'pointer';
}

// –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
function rechargeEnergy() {
    if (currentEnergy < maxEnergy) {
        currentEnergy += energyRechargeRate;
        if (currentEnergy > maxEnergy) {
            currentEnergy = maxEnergy;
        }
        updateEnergyDisplay();
        savePlayerData(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–æ–∫—Ä–∞—â–µ–Ω—å
function checkUpgradeAvailability() {
    upgrade1Button.disabled = score < upgrade1Cost;
    upgrade2Button.disabled = score < upgrade2Cost;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è –∑ Firestore
async function loadPlayerData() {
    if (typeof window.db === 'undefined' || !window.db) {
        console.error("Firebase Firestore is not initialized or not accessible (db is undefined).");
        updateDisplay();
        return;
    }

    if (!telegramUserId) {
        console.warn("Telegram User ID not available. Running in test mode without saving progress.");
        telegramUserId = 'test_user_local';
        updateDisplay();
        return;
    }

    try {
        const docRef = window.db.collection("players").doc(telegramUserId);
        const docSnap = await docRef.get();

        if (docSnap.exists) {
            const data = docSnap.data();
            score = data.score || 0;
            mainBalance = data.mainBalance || 0; // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å
            clickPower = data.clickPower || 1;
            autoClickPower = data.autoClickPower || 0;
            upgrade1Cost = data.upgrade1Cost || 100;
            upgrade2Cost = data.upgrade2Cost || 500;
            currentEnergy = data.currentEnergy || maxEnergy; // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é
        } else {
            console.log("No player data found for", telegramUserId, ". Starting new game.");
            // –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ–∫—Ä–∞—â–µ–Ω—å –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ —á–∏ –Ω—ñ
        upgrade1CostElement.textContent = upgrade1Cost;
        upgrade2CostElement.textContent = upgrade2Cost;

        updateDisplay(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ-–∫–ª—ñ–∫–µ—Ä, —è–∫—â–æ –±—É–≤ –∞–∫—Ç–∏–≤–Ω–∏–π
        if (autoClickPower > 0) {
            if (autoClickInterval) {
                clearInterval(autoClickInterval);
            }
            autoClickInterval = setInterval(() => {
                score += autoClickPower;
                updateDisplay();
                savePlayerData();
            }, 1000);
        }

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
        if (energyRechargeInterval) {
            clearInterval(energyRechargeInterval);
        }
        energyRechargeInterval = setInterval(rechargeEnergy, energyRechargeIntervalTime);

    } catch (error) {
        console.error('Error loading player data:', error);
        // –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        upgrade1CostElement.textContent = upgrade1Cost;
        upgrade2CostElement.textContent = upgrade2Cost;
        updateDisplay();
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è –≤ Firestore
async function savePlayerData() {
    if (typeof window.db === 'undefined' || !window.db) {
        console.error("Firebase Firestore is not initialized or not accessible for saving.");
        return;
    }

    if (!telegramUserId || telegramUserId === 'test_user_local') {
        console.warn("Cannot save data: Telegram User ID is not available or is a test ID.");
        return;
    }

    try {
        await window.db.collection("players").doc(telegramUserId).set({
            score: score,
            mainBalance: mainBalance, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å
            clickPower: clickPower,
            autoClickPower: autoClickPower,
            upgrade1Cost: upgrade1Cost,
            upgrade2Cost: upgrade2Cost,
            currentEnergy: currentEnergy // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é
        });
        // console.log('Player data saved for', telegramUserId); // –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
    } catch (error) {
        console.error('Error saving player data:', error);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function startLoadingProgress() {
    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 5; // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –ø—Ä–∏—Ä—ñ—Å—Ç
        if (progress > 99) {
            progress = 99; // –ó–∞–ª–∏—à–∞—î–º–æ –Ω–∞ 99% –Ω–∞ 4 —Å–µ–∫—É–Ω–¥–∏
        }
        progressBarFill.style.width = `${progress}%`;
        loadingText.textContent = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è... ${Math.floor(progress)}%`;

        if (progress === 99) {
            clearInterval(interval);
            setTimeout(() => {
                loadingScreen.classList.add('hidden');
                gameScreen.classList.remove('hidden');
                loadPlayerData(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –ø–æ–∫–∞–∑—É –≥—Ä–∏
            }, 4000); // –ó–∞—Ç—Ä–∏–º–∫–∞ 4 —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ 99%
        }
    }, 50); // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 50 –º—Å
}


// ----- DOMContentLoaded: –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ –≤–µ—Å—å HTML –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–∞ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ -----
document.addEventListener('DOMContentLoaded', () => {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram Web App API —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.ready();
        // –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è Web App –Ω–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω
        setTimeout(() => {
            tg.expand();
        }, 100);

        if (tg.initDataUnsafe && tg.initDataUnsafe.user && tg.initDataUnsafe.user.id) {
            telegramUserId = tg.initDataUnsafe.user.id.toString();
            if (debugUserIdElement) {
                debugUserIdElement.textContent = "ID: " + telegramUserId;
            }
        } else {
            console.warn("Telegram User ID not available (tg.initDataUnsafe.user.id is missing).");
            if (debugUserIdElement) {
                debugUserIdElement.textContent = "ID: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (—Ç–µ—Å—Ç)";
            }
        }
    } else {
        console.warn("Telegram Web App API not found. Please open in Telegram to get user ID.");
        if (debugUserIdElement) {
            debugUserIdElement.textContent = "ID: API Telegram –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";
        }
        // –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ Telegram, –æ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –≥—Ä—É –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        setTimeout(() => {
            loadingScreen.classList.add('hidden');
            gameScreen.classList.remove('hidden');
            loadPlayerData();
        }, 2000); // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    }

    startLoadingProgress(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ

    // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫–∞ –ø–æ –º–æ–Ω–µ—Ç—ñ
    clickButton.addEventListener('click', () => {
        if (currentEnergy > 0) {
            score += clickPower;
            currentEnergy--; // –ó–º–µ–Ω—à—É—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é
            updateDisplay();
            savePlayerData();
            coinClickSound.currentTime = 0;
            coinClickSound.play().catch(e => console.error("Error playing sound:", e));
        } else {
            console.log("–ï–Ω–µ—Ä–≥—ñ—è –≤–∏—á–µ—Ä–ø–∞–Ω–∞!");
            // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤—ñ–∑—É–∞–ª—å–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —â–æ –µ–Ω–µ—Ä–≥—ñ—è –≤–∏—á–µ—Ä–ø–∞–Ω–∞
        }
    });

    // –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è 1: –ë—ñ–ª—å—à–µ –º–æ–Ω–µ—Ç –∑–∞ –∫–ª—ñ–∫
    upgrade1Button.addEventListener('click', () => {
        if (score >= upgrade1Cost) {
            score -= upgrade1Cost;
            clickPower += 1;
            upgrade1Cost = Math.floor(upgrade1Cost * 1.5);
            upgrade1CostElement.textContent = upgrade1Cost;
            updateDisplay();
            savePlayerData();
        }
    });

    // –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è 2: –ê–≤—Ç–æ-–∫–ª—ñ–∫–µ—Ä
    upgrade2Button.addEventListener('click', () => {
        if (score >= upgrade2Cost) {
            score -= upgrade2Cost;
            autoClickPower += 1;
            upgrade2Cost = Math.floor(upgrade2Cost * 2);
            upgrade2CostElement.textContent = upgrade2Cost;
            updateDisplay();
            savePlayerData();

            if (autoClickInterval) {
                clearInterval(autoClickInterval);
            }
            autoClickInterval = setInterval(() => {
                score += autoClickPower;
                updateDisplay();
                savePlayerData();
            }, 1000);
        }
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
    setInterval(savePlayerData, 5000);
});
