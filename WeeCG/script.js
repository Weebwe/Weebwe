// script.js

// --- Firebase Initialization START ---
// –¶–µ –≤–∞—à—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ Firebase.
// –£–í–ê–ì–ê: –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —Ü–∏—Ö –∫–ª—é—á—ñ–≤ —É –≤—ñ–¥–∫—Ä–∏—Ç–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó GitHub –ù–ï–ë–ï–ó–ü–ï–ß–ù–ê –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤.
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π –º–µ—Ç–æ–¥ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –¢–ï–°–¢–£–í–ê–ù–ù–Ø, —è–∫—â–æ –≤–∏ —Ä–æ–∑—É–º—ñ—î—Ç–µ —Ä–∏–∑–∏–∫–∏,
// –∞–±–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó–≤.
// –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –ø–æ—Ç—Ä—ñ–±–Ω—ñ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ñ—É–Ω–∫—Ü—ñ—è Firebase, –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä).
const firebaseConfig = {
  apiKey: "AIzaSyAt5GlmmqhW6IeDd3oFB0yq2xQARd8YPNs",
  authDomain: "weegamebot-7c44b.firebaseapp.com",
  databaseURL: "https://weegamebot-7c44b-default-rtdb.firebaseio.com",
  projectId: "weegamebot-7c44b",
  storageBucket: "weegamebot-7c44b.firebasestorage.app",
  messagingSenderId: "1052981895153",
  appId: "1:1052981895153:web:0c8426bf8e5b97729a6e50"
};

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Firebase SDK –∑ CDN
const firebaseAppScript = document.createElement('script');
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—É –≤–µ—Ä—Å—ñ—é Firebase SDK –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ 'firebase.firestore()'
// —è–∫–∞ –±—É–ª–∞ –≤–∫–∞–∑–∞–Ω–∞ —É –≤–∞—à–æ–º—É –∫–æ–¥—ñ. –î–ª—è –Ω–æ–≤–∏—Ö –≤–µ—Ä—Å—ñ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è getFirestore().
firebaseAppScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"; // –û—Å—Ç–∞–Ω–Ω—ñ–π –∞–∫—Ç—É–∞–ª—å–Ω–∏–π CDN —à–ª—è—Ö –¥–ª—è v8
firebaseAppScript.onload = () => {
    const firebaseFirestoreScript = document.createElement('script');
    firebaseFirestoreScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"; // –û—Å—Ç–∞–Ω–Ω—ñ–π –∞–∫—Ç—É–∞–ª—å–Ω–∏–π CDN —à–ª—è—Ö –¥–ª—è v8
    firebaseFirestoreScript.onload = () => {
        const app = firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ firebase.firestore() –¥–ª—è Firebase SDK v8
        window.db = db; // –ó—Ä–æ–±–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–º –≥–ª–æ–±–∞–ª—å–Ω–æ

        console.log("Firebase Firestore initialized.");

        // –¢–µ–ø–µ—Ä, –∫–æ–ª–∏ Firebase —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏
        loadPlayerData(); // –¶–µ–π –≤–∏–∫–ª–∏–∫ —Ç–µ–ø–µ—Ä –±–µ–∑–ø–µ—á–Ω–∏–π
    };
    document.head.appendChild(firebaseFirestoreScript);
};
document.head.appendChild(firebaseAppScript);

// --- Firebase Initialization END ---

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ HTML-–µ–ª–µ–º–µ–Ω—Ç–∏
const scoreElement = document.getElementById('score');
const clickButton = document.getElementById('clickButton');
const upgrade1Button = document.getElementById('upgrade1');
const upgrade1CostElement = document.getElementById('upgrade1Cost');
const upgrade2Button = document.getElementById('upgrade2');
const upgrade2CostElement = document.getElementById('upgrade2Cost');
const debugUserIdElement = document.getElementById('debugUserId');

const loadingScreen = document.getElementById('loading-screen');
const gameScreen = document.getElementById('game-screen');
const progressBarFill = document.getElementById('progressBarFill');
const loadingText = document.getElementById('loadingText');

const mainBalanceElement = document.getElementById('mainBalance');
const energyBarFill = document.getElementById('energyBarFill');
const energyText = document.getElementById('energyText');

// –Ü–≥—Ä–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ
let score = 0;
let mainBalance = 0;
let clickPower = 1;
let autoClickPower = 0;
let upgrade1Cost = 100;
let upgrade2Cost = 500;
let telegramUserId = null;

let currentEnergy = 1000;
const maxEnergy = 1000;
const energyRechargeRate = 100;
const energyRechargeIntervalTime = 5000;

let autoClickInterval;
let energyRechargeInterval;

const coinClickSound = new Audio('coin_click.mp3');
coinClickSound.volume = 0.5;

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
function updateDisplay() {
    scoreElement.textContent = Math.floor(score);
    mainBalanceElement.textContent = Math.floor(mainBalance);
    upgrade1CostElement.textContent = upgrade1Cost;
    upgrade2CostElement.textContent = upgrade2Cost;
    checkUpgradeAvailability();
    updateEnergyDisplay();
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
function updateEnergyDisplay() {
    const percentage = (currentEnergy / maxEnergy) * 100;
    energyBarFill.style.width = `${percentage}%`;
    const icon = currentEnergy <= 0 ? 'ü™´' : 'üîã';
    energyText.textContent = `${icon} ${Math.floor(currentEnergy)} / ${maxEnergy}`;
    clickButton.disabled = currentEnergy <= 0;
    clickButton.style.opacity = currentEnergy <= 0 ? 0.7 : 1;
    clickButton.style.cursor = currentEnergy <= 0 ? 'not-allowed' : 'pointer';
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ø–≥—Ä–µ–π–¥—ñ–≤
function checkUpgradeAvailability() {
    upgrade1Button.disabled = score < upgrade1Cost;
    upgrade2Button.disabled = score < upgrade2Cost;
}

// –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
function rechargeEnergy() {
    if (currentEnergy < maxEnergy) {
        currentEnergy += energyRechargeRate;
        currentEnergy = Math.min(currentEnergy, maxEnergy);
        updateEnergyDisplay();
        savePlayerData();
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ Firestore
async function loadPlayerData() {
    if (!window.db) {
        console.error("Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π. (loadPlayerData)");
        updateDisplay();
        return;
    }

    if (!telegramUserId) {
        console.warn("Telegram User ID not available for load. Running in test mode.");
        telegramUserId = 'test_user_local'; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID, —â–æ–± –≥—Ä–∞ –Ω–µ –∑—É–ø–∏–Ω—è–ª–∞—Å—å
        updateDisplay();
        return;
    }

    try {
        const doc = await window.db.collection("players").doc(telegramUserId).get();
        if (doc.exists) {
            const data = doc.data();
            score = data.score || 0;
            mainBalance = data.mainBalance || 0;
            clickPower = data.clickPower || 1;
            autoClickPower = data.autoClickPower || 0;
            upgrade1Cost = data.upgrade1Cost || 100;
            upgrade2Cost = data.upgrade2Cost || 500;
            currentEnergy = data.currentEnergy || maxEnergy;
        } else {
            console.log("No player data found for", telegramUserId, ". Starting new game.");
        }
        updateDisplay();

        // –ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –ü–Ü–°–õ–Ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        startAutoClicker();
        startEnergyRecharge();

    } catch (e) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è:', e);
        updateDisplay();
    }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Firestore
async function savePlayerData() {
    if (!window.db) {
        console.warn("Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.");
        return;
    }
    if (telegramUserId === 'test_user_local' || !telegramUserId) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ null —Ç–∞–∫–æ–∂
        console.warn("Cannot save data: Telegram User ID is test ID or not available. Data will not be saved to Firestore.");
        return;
    }

    try {
        await window.db.collection("players").doc(telegramUserId).set({
            score, mainBalance, clickPower, autoClickPower,
            upgrade1Cost, upgrade2Cost, currentEnergy
        });
        // console.log("Player data saved for", telegramUserId); // –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏ –ª–æ–≥—ñ–≤
    } catch (e) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è:", e);
    }
}

// –ê–≤—Ç–æ–∫–ª—ñ–∫
function startAutoClicker() {
    if (autoClickInterval) clearInterval(autoClickInterval);
    if (autoClickPower > 0) {
        autoClickInterval = setInterval(() => {
            score += autoClickPower;
            updateDisplay();
            savePlayerData();
        }, 1000);
    }
}

// –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
function startEnergyRecharge() {
    if (energyRechargeInterval) clearInterval(energyRechargeInterval);
    energyRechargeInterval = setInterval(rechargeEnergy, energyRechargeIntervalTime);
}

// –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function startLoadingProgress() {
    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 5;
        if (progress > 99) progress = 99;
        progressBarFill.style.width = `${progress}%`;
        loadingText.textContent = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è... ${Math.floor(progress)}%`;
        if (progress === 99) {
            clearInterval(interval);
            setTimeout(() => {
                loadingScreen.classList.add('hidden');
                gameScreen.classList.remove('hidden');
                // loadPlayerData() —Ç–∞ —ñ–Ω—à—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ —Ç–µ–ø–µ—Ä –≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è –∑ Firebase onload
            }, 4000);
        }
    }, 50);
}

// –°—Ç–∞—Ä—Ç –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
document.addEventListener('DOMContentLoaded', () => {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram Web App API —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.ready();
        setTimeout(() => tg.expand(), 100); // –†–æ–∑—à–∏—Ä—é—î–º–æ Web App –Ω–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω

        if (tg.initDataUnsafe?.user?.id) {
            telegramUserId = tg.initDataUnsafe.user.id.toString();
            debugUserIdElement.textContent = "ID: " + telegramUserId;
            console.log("Telegram User ID obtained:", telegramUserId);
        } else {
            console.warn("Telegram User ID not available from tg.initDataUnsafe.user.id.");
            debugUserIdElement.textContent = "ID: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (—Ç–µ—Å—Ç)";
        }
    } else {
        console.warn("Telegram Web App API not found. Please open in Telegram to get user ID.");
        debugUserIdElement.textContent = "ID: API Telegram –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";
        // –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ Telegram, –ø–æ–∫–∞–∑—É—î–º–æ –≥—Ä—É
        setTimeout(() => {
            loadingScreen.classList.add('hidden');
            gameScreen.classList.remove('hidden');
            // loadPlayerData() —Ç–∞ —ñ–Ω—à—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ —Ç–µ–ø–µ—Ä –≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è –∑—Å–µ—Ä–µ–¥–∏–Ω–∏ Firebase onload, –∞ –Ω–µ —Ç—É—Ç
        }, 2000);
    }

    startLoadingProgress(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ

    // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
    clickButton.addEventListener('click', () => {
        if (currentEnergy > 0) {
            score += clickPower;
            currentEnergy--;
            updateDisplay();
            savePlayerData();
            try {
                coinClickSound.currentTime = 0;
                coinClickSound.play();
            } catch (e) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É:", e);
            }
        } else {
            console.log("–ï–Ω–µ—Ä–≥—ñ—è –≤–∏—á–µ—Ä–ø–∞–Ω–∞!");
        }
    });

    upgrade1Button.addEventListener('click', () => {
        if (score >= upgrade1Cost) {
            score -= upgrade1Cost;
            clickPower += 1;
            upgrade1Cost = Math.floor(upgrade1Cost * 1.5);
            updateDisplay();
            savePlayerData();
        }
    });

    upgrade2Button.addEventListener('click', () => {
        if (score >= upgrade2Cost) {
            score -= upgrade2Cost;
            autoClickPower += 1;
            upgrade2Cost = Math.floor(upgrade2Cost * 2);
            startAutoClicker(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä –∑ –Ω–æ–≤–æ—é –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é
            updateDisplay();
            savePlayerData();
        }
    });

    setInterval(savePlayerData, 5000); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
});
