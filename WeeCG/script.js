// script.js - –û–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ Firebase —Ç–∞ –ª–æ–≥—ñ–∫–∏ –≥—Ä–∏

// --- Firebase Initialization START ---
const firebaseConfig = {
    apiKey: "AIzaSyAt5GlmmqhW6IeDd3oFB0yq2xQARd8YPNs",
    authDomain: "weegamebot-7c44b.firebaseapp.com",
    databaseURL: "https://weegamebot-7c44b-default-rtdb.firebaseio.com",
    projectId: "weegamebot-7c44b",
    storageBucket: "weegamebot-7c44b.appspot.com",
    messagingSenderId: "1052981895153",
    appId: "1:1052981895153:web:0c8426bf8e5b97729a6e50"
};

let db; // –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è Firebase Firestore
let firebaseInitialized = false; // –§–ª–∞–≥ —Å—Ç–∞–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Firebase

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î Firebase SDK —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–æ–¥–∞—Ç–æ–∫.
 * –ü–æ–≤–µ—Ä—Ç–∞—î Promise, —è–∫–∏–π —Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.
 */
const loadFirebaseSDK = () => {
    return new Promise((resolve, reject) => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ Firebase –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (typeof firebase !== 'undefined' && firebase.apps.length) {
            db = firebase.firestore();
            firebaseInitialized = true;
            console.log("Firebase SDK already loaded and initialized.");
            return resolve();
        }

        const firebaseAppScript = document.createElement('script');
        firebaseAppScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js";
        firebaseAppScript.onload = () => {
            const firebaseFirestoreScript = document.createElement('script');
            firebaseFirestoreScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js";
            firebaseFirestoreScript.onload = () => {
                try {
                    const app = firebase.initializeApp(firebaseConfig);
                    db = firebase.firestore();
                    firebaseInitialized = true;
                    console.log("Firebase Firestore initialized successfully.");
                    resolve();
                } catch (e) {
                    console.error("Error initializing Firebase:", e);
                    reject(e);
                }
            };
            firebaseFirestoreScript.onerror = () => {
                console.error("Failed to load firebase-firestore.js");
                reject(new Error("Failed to load firebase-firestore.js"));
            };
            document.head.appendChild(firebaseFirestoreScript);
        };
        firebaseAppScript.onerror = () => {
            console.error("Failed to load firebase-app.js");
            reject(new Error("Failed to load firebase-app.js"));
        };
        document.head.appendChild(firebaseAppScript);
    });
};
// --- Firebase Initialization END ---

// --- DOM Elements ---
const scoreElement = document.getElementById('score');
const clickButton = document.getElementById('clickButton');
const upgrade1Button = document.getElementById('upgrade1');
const upgrade1CostElement = document.getElementById('upgrade1Cost');
const upgrade2Button = document.getElementById('upgrade2');
const upgrade2CostElement = document.getElementById('upgrade2Cost');
const debugUserIdElement = document.getElementById('debugUserId');

const loadingScreen = document.getElementById('loading-screen');
const gameScreen = document.getElementById('game-screen');
const progressBarFill = document.getElementById('progressBarFill');
const loadingText = document.getElementById('loadingText');

const mainBalanceElement = document.getElementById('mainBalance'); // –î–ª—è WEE Balance
const energyBarFill = document.getElementById('energyBarFill');
const energyText = document.getElementById('energyText');

// --- Game Variables ---
let score = 0;
let mainBalance = 0; // –¶–µ WEE Balance
let clickPower = 1;
let autoClickPower = 0;
let upgrade1Cost = 100;
let upgrade2Cost = 500;
let telegramUserId = null; // –ë—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑ Telegram Web App

const MAX_ENERGY = 100;
let currentEnergy = MAX_ENERGY;
let lastEnergyRechargeTime = 0; // Unix timestamp
let autoClickInterval = null;

const coinClickSound = new Audio('coin_click.mp3'); 
coinClickSound.volume = 0.5;

// --- UI Update ---
function updateDisplay() {
    scoreElement.textContent = Math.floor(score).toLocaleString();
    mainBalanceElement.textContent = parseFloat(mainBalance).toFixed(2);
    upgrade1CostElement.textContent = Math.floor(upgrade1Cost).toLocaleString();
    upgrade2CostElement.textContent = Math.floor(upgrade2Cost).toLocaleString();
    checkUpgradeAvailability();
    updateEnergyDisplay();
}

function updateEnergyDisplay() {
    const percentage = (currentEnergy / MAX_ENERGY) * 100;
    energyBarFill.style.width = `${percentage}%`;
    const icon = currentEnergy <= 0 ? 'ü™´' : 'üîã';
    energyText.textContent = `${icon} ${Math.floor(currentEnergy)} / ${MAX_ENERGY}`;

    // –í—ñ–∑—É–∞–ª—å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫ –ø—Ä–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–Ω—ñ –µ–Ω–µ—Ä–≥—ñ—ó
    if (currentEnergy <= 0) {
        clickButton.disabled = true;
        clickButton.classList.add('no-energy');
    } else {
        clickButton.disabled = false;
        clickButton.classList.remove('no-energy');
    }
}

function checkUpgradeAvailability() {
    upgrade1Button.disabled = score < upgrade1Cost;
    upgrade2Button.disabled = score < upgrade2Cost;
}

// --- Energy Recharge Logic ---
function rechargeEnergyLogic() {
    const now = Date.now();
    const fullDay = 24 * 60 * 60 * 1000; // 24 –≥–æ–¥–∏–Ω–∏ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

    if (currentEnergy < MAX_ENERGY && (now - lastEnergyRechargeTime) >= fullDay) {
        currentEnergy = MAX_ENERGY;
        lastEnergyRechargeTime = now;
        updateEnergyDisplay();
        savePlayerData();
        console.log("Energy recharged to max.");
    } else if (currentEnergy === MAX_ENERGY) {
        // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è –≤–∂–µ –ø–æ–≤–Ω–∞, –æ–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å, —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–∏–π –≤—ñ–¥–ª—ñ–∫ –±—É–≤ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º
        lastEnergyRechargeTime = now;
        savePlayerData();
    }
}

// --- Firebase: Load & Save Player Data ---
async function loadPlayerData() {
    console.log("Attempting to load player data...");
    if (!firebaseInitialized || !db) {
        console.error("Firestore not initialized or Firebase not ready. Cannot load player data.");
        // –ü–æ–∫–∞–∑—É—î–º–æ –≥—Ä—É –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏, —è–∫—â–æ Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
        telegramUserId = 'test_user_local'; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID, —â–æ–± –≥—Ä–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—è
        debugUserIdElement.textContent = "ID: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç)";
        updateDisplay();
        startAutoClicker();
        rechargeEnergyLogic();
        hideLoadingScreen();
        return;
    }

    if (!telegramUserId) {
        console.warn("Telegram User ID not available for load. Running in test mode.");
        telegramUserId = 'test_user_local'; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
        debugUserIdElement.textContent = "ID: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç)";
    } else {
        debugUserIdElement.textContent = "ID: " + telegramUserId;
    }

    try {
        const doc = await db.collection("players").doc(telegramUserId).get();
        if (doc.exists) {
            const data = doc.data();
            score = data.score || 0;
            mainBalance = data.mainBalance || 0;
            clickPower = data.clickPower || 1;
            autoClickPower = data.autoClickPower || 0;
            upgrade1Cost = data.upgrade1Cost || 100;
            upgrade2Cost = data.upgrade2Cost || 500;
            currentEnergy = data.currentEnergy || MAX_ENERGY;
            lastEnergyRechargeTime = data.lastEnergyRechargeTime || Date.now(); // –Ø–∫—â–æ –Ω–µ–º–∞—î, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞—Ä–∞–∑
            console.log("Player data loaded for", telegramUserId, ":", data);
        } else {
            console.log("No player data found for", telegramUserId, ". Starting new game.");
            lastEnergyRechargeTime = Date.now(); // –î–ª—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
        }
        updateDisplay();
        startAutoClicker();
        rechargeEnergyLogic(); // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
    } catch (e) {
        console.error("Error loading player data:", e);
        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –≤—Å–µ –æ–¥–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ –≥—Ä—É –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
        updateDisplay();
        startAutoClicker();
        rechargeEnergyLogic();
    } finally {
        hideLoadingScreen(); // –ó–∞–≤–∂–¥–∏ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –µ–∫—Ä–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Å–ø—Ä–æ–±–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    }
}

async function savePlayerData() {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ Firebase —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —ñ —î —Ä–µ–∞–ª—å–Ω–∏–π telegramUserId
    if (!firebaseInitialized || !db || !telegramUserId || telegramUserId === 'test_user_local') {
        // console.warn("Cannot save data: Firestore not initialized or Telegram User ID is test ID/not available.");
        return;
    }
    try {
        await db.collection("players").doc(telegramUserId).set({
            score: Math.floor(score),
            mainBalance: parseFloat(mainBalance.toFixed(2)),
            clickPower,
            autoClickPower,
            upgrade1Cost: Math.floor(upgrade1Cost),
            upgrade2Cost: Math.floor(upgrade2Cost),
            currentEnergy: Math.floor(currentEnergy),
            lastEnergyRechargeTime
        }, { merge: true });
        // console.log("Player data saved for", telegramUserId);
    } catch (e) {
        console.error("Error saving player data:", e);
    }
}

// --- Autoclicker ---
function startAutoClicker() {
    if (autoClickInterval) clearInterval(autoClickInterval); // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
    if (autoClickPower > 0) {
        autoClickInterval = setInterval(() => {
            score += autoClickPower;
            updateDisplay();
        }, 1000); // –ö–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
    }
}

// --- Loading Screen Logic ---
function startLoadingProgress() {
    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 5; // –ù–µ–≤–µ–ª–∏–∫–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø—Ä–∏—Ä—ñ—Å—Ç –¥–ª—è "–∂–∏–≤–æ—Å—Ç—ñ"
        if (progress > 95) progress = 95; // –ú–∞–∫—Å–∏–º—É–º 95%, —â–æ–± –æ—Å—Ç–∞–Ω–Ω—ñ 5% –¥–æ—á–µ–∫–∞–ª–∏—Å—è Firebase
        progressBarFill.style.width = `${progress}%`;
        loadingText.textContent = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è... ${Math.floor(progress)}%`;

        if (progress >= 95 && firebaseInitialized) {
            clearInterval(interval);
            // –ü—Ä–æ–≥—Ä–µ—Å –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è –Ω–∞ 95%, —Ä–µ—à—Ç–∞ 5% —á–µ–∫–∞—î –Ω–∞ initializeGameAfterFirebase()
        }
    }, 50);
}

function hideLoadingScreen() {
    console.log("Hiding loading screen and showing game screen.");
    loadingScreen.classList.add('hidden');
    gameScreen.classList.remove('hidden');
}


// --- Main Game Initialization After DOM and Firebase Ready ---
async function initializeGame() {
    console.log("Initializing game...");

    // 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram Web App API
    if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.ready();
        setTimeout(() => tg.expand(), 100); // –†–æ–∑—à–∏—Ä—é—î–º–æ Web App

        if (tg.initDataUnsafe?.user?.id) {
            telegramUserId = tg.initDataUnsafe.user.id.toString();
            console.log("Telegram User ID obtained:", telegramUserId);
        } else {
            console.warn("Telegram User ID not available from tg.initDataUnsafe.user.id. Running in test mode.");
        }
    } else {
        console.warn("Telegram Web App API not found. Please open in Telegram for full functionality.");
    }

    // 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è (–≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Firebase)
    await loadPlayerData();
}


// --- Event Listeners and Initial Setup ---
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM Content Loaded.");

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É –æ–¥—Ä–∞–∑—É
    startLoadingProgress();

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Firebase SDK, –∞ –ø–æ—Ç—ñ–º —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥—Ä—É
    loadFirebaseSDK()
        .then(() => {
            console.log("Firebase SDK loaded, proceeding with game initialization.");
            initializeGame();
        })
        .catch(error => {
            console.error("Failed to load Firebase SDK or initialize game:", error);
            loadingText.textContent = "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.";
            progressBarFill.style.width = '0%';
            // –Ø–∫—â–æ Firebase –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è, –ø–æ–∫–∞–∑—É—î–º–æ –≥—Ä—É –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
            telegramUserId = 'test_user_local';
            debugUserIdElement.textContent = "ID: –ü–æ–º–∏–ª–∫–∞ Firebase (–ª–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç)";
            updateDisplay();
            startAutoClicker();
            rechargeEnergyLogic();
            hideLoadingScreen(); // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –µ–∫—Ä–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ Firebase –Ω–µ –ø—Ä–∞—Ü—é—î
        });

    // --- Click handler ---
    clickButton.addEventListener('click', (event) => {
        if (currentEnergy > 0) {
            score += clickPower;
            currentEnergy--;
            updateDisplay();
            savePlayerData(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ–∫—É

            try {
                coinClickSound.currentTime = 0;
                coinClickSound.play();
            } catch (e) {
                console.error("Sound error:", e);
            }

            const floatingText = document.createElement('div');
            floatingText.classList.add('floating-text');
            floatingText.textContent = `+${clickPower}`;
            floatingText.style.left = `${event.clientX}px`;
            floatingText.style.top = `${event.clientY - 20}px`;
            gameScreen.appendChild(floatingText); // –î–æ–¥–∞—î–º–æ –¥–æ gameScreen, —â–æ–± –±—É–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è
            floatingText.addEventListener('animationend', () => {
                floatingText.remove();
            });
        } else {
            console.log("Energy depleted.");
            // –ö–ª–∞—Å 'no-energy' –≤–∂–µ –¥–æ–¥–∞—î—Ç—å—Å—è/–≤–∏–¥–∞–ª—è—î—Ç—å—Å—è –≤ updateEnergyDisplay
        }
    });

    // --- Upgrade buttons ---
    upgrade1Button.addEventListener('click', () => {
        if (score >= upgrade1Cost) {
            score -= upgrade1Cost;
            clickPower += 1;
            upgrade1Cost = Math.floor(upgrade1Cost * 1.5);
            updateDisplay();
            savePlayerData();
        }
    });

    upgrade2Button.addEventListener('click', () => {
        if (score >= upgrade2Cost) {
            score -= upgrade2Cost;
            autoClickPower += 1;
            upgrade2Cost = Math.floor(upgrade2Cost * 2);
            startAutoClicker(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —à–≤–∏–¥–∫—ñ—Å—Ç—å
            updateDisplay();
            savePlayerData();
        }
    });

    // --- Autosave ---
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Firebase
    setInterval(savePlayerData, 5000);
});

/*
    –í–∞–º —Ç–∞–∫–æ–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ —Ü—ñ —Å—Ç–∏–ª—ñ –¥–æ –≤–∞—à–æ–≥–æ CSS —Ñ–∞–π–ª—É, —è–∫—â–æ —ó—Ö —Ç–∞–º —â–µ –Ω–µ–º–∞—î:

    .floating-text {
        position: absolute;
        font-size: 1.5em;
        font-weight: bold;
        color: #0094FE; // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –≤–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–æ–ª—ñ—Ä
        text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        opacity: 0;
        animation: floatUp 1s forwards;
        pointer-events: none; // –©–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–ª—ñ–∫–∏
        z-index: 100;
        white-space: nowrap; // –©–æ–± —Ç–µ–∫—Å—Ç –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–≤—Å—è
    }

    @keyframes floatUp {
        from {
            transform: translateY(0) scale(1);
            opacity: 1;
        }
        to {
            transform: translateY(-50px) scale(1.2);
            opacity: 0;
        }
    }

    .no-energy {
        animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
        transform: translate3d(0, 0, 0);
        backface-visibility: hidden;
        perspective: 1000px;
    }

    @keyframes shake {
        10%, 90% { transform: translate3d(-1px, 0, 0); }
        20%, 80% { transform: translate3d(2px, 0, 0); }
        30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
        40%, 60% { transform: translate3d(4px, 0, 0); }
    }
*/
    
