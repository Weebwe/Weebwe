// script.js - –§—ñ–Ω–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º –µ–Ω–µ—Ä–≥—ñ—ó —Ç–∞ —Ç–∞–π–º–µ—Ä–æ–º

// --- Firebase Initialization START ---
const firebaseConfig = {
  apiKey: "AIzaSyAt5GlmmqhW6IeDd3oFB0yq2xQARd8YPNs",
  authDomain: "weegamebot-7c44b.firebaseapp.com",
  databaseURL: "https://weegamebot-7c44b-default-rtdb.firebaseio.com",
  projectId: "weegamebot-7c44b",
  storageBucket: "weegamebot-7c44b.appspot.com",
  messagingSenderId: "1052981895153",
  appId: "1:1052981895153:web:0c8426bf8e5b97729a6e50"
};

let db;

const firebaseAppScript = document.createElement('script');
firebaseAppScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js";
firebaseAppScript.onload = () => {
    const firebaseFirestoreScript = document.createElement('script');
    firebaseFirestoreScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js";
    firebaseFirestoreScript.onload = () => {
        const app = firebase.initializeApp(firebaseConfig);
        db = firebase.firestore();
        console.log("Firebase Firestore initialized.");
        initializeGameAfterFirebase();
    };
    document.head.appendChild(firebaseFirestoreScript);
};
document.head.appendChild(firebaseAppScript);
// --- Firebase Initialization END ---

// --- DOM Elements ---
const scoreElement = document.getElementById('score');
const clickButton = document.getElementById('clickButton');
const upgrade1Button = document.getElementById('upgrade1');
const upgrade1CostElement = document.getElementById('upgrade1Cost');
const upgrade2Button = document.getElementById('upgrade2');
const upgrade2CostElement = document.getElementById('upgrade2Cost');
const debugUserIdElement = document.getElementById('debugUserId');

const loadingScreen = document.getElementById('loading-screen');
const gameScreen = document.getElementById('game-screen');
const progressBarFill = document.getElementById('progressBarFill');
const loadingText = document.getElementById('loadingText');

const mainBalanceElement = document.getElementById('mainBalance');
const energyBarFill = document.getElementById('energyBarFill');
const energyText = document.getElementById('energyText');

// --- Game Variables ---
let score = 0;
let mainBalance = 0;
let clickPower = 1;
let autoClickPower = 0;
let upgrade1Cost = 100;
let upgrade2Cost = 500;
let telegramUserId = null;

let currentEnergy = 100;
const maxEnergy = 100;
// lastEnergyZeroTime: —á–∞—Å, –∫–æ–ª–∏ –µ–Ω–µ—Ä–≥—ñ—è –í–û–°–¢–ê–ù–ù–Ñ —Å—Ç–∞–ª–∞ 0.
// –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è –ø–æ–≤–Ω–∞, —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ 0 –∞–±–æ null.
let lastEnergyZeroTime = 0;
let autoClickInterval;
let rechargeTimerInterval; // –ó–º—ñ–Ω–Ω–∞ –¥–ª—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É —Ç–∞–π–º–µ—Ä–∞

const coinClickSound = new Audio('coin_click.mp3');
coinClickSound.volume = 0.5;

// --- UI Update ---
function updateDisplay() {
    scoreElement.textContent = Math.floor(score);
    mainBalanceElement.textContent = Math.floor(mainBalance);
    upgrade1CostElement.textContent = upgrade1Cost;
    upgrade2CostElement.textContent = upgrade2Cost;
    checkUpgradeAvailability();
    updateEnergyDisplay(); // –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –≤–∏—Ä—ñ—à—É—î, —â–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏
}

function updateEnergyDisplay() {
    const percentage = (currentEnergy / maxEnergy) * 100;
    energyBarFill.style.width = `${percentage}%`;

    clickButton.disabled = currentEnergy <= 0;
    clickButton.style.opacity = currentEnergy <= 0 ? 0.7 : 1;
    clickButton.style.cursor = currentEnergy <= 0 ? 'not-allowed' : 'pointer';

    if (currentEnergy === 0) {
        // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è 0, –ø–æ–∫–∞–∑—É—î–º–æ —Ç–∞–π–º–µ—Ä
        startRechargeTimerDisplay();
    } else {
        // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è –Ω–µ 0, –ø–æ–∫–∞–∑—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç —ñ –∑—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
        if (rechargeTimerInterval) {
            clearInterval(rechargeTimerInterval);
            rechargeTimerInterval = null;
        }
        energyText.textContent = `üîã ${Math.floor(currentEnergy)} / ${maxEnergy}`;
    }
}

// –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
function updateRechargeTimerDisplay() {
    const now = Date.now();
    const fullDayInMs = 24 * 60 * 60 * 1000;
    const timePassedSinceZero = now - lastEnergyZeroTime;
    const timeLeftMs = fullDayInMs - timePassedSinceZero;

    if (timeLeftMs <= 0) {
        // –Ø–∫—â–æ —á–∞—Å –º–∏–Ω—É–≤, —Å–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é
        rechargeEnergyOncePerDay(); // –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å, —á–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏
        if (currentEnergy === maxEnergy) {
            // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è –≤—ñ–¥–Ω–æ–≤–∏–ª–∞—Å—è, –∑—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
            if (rechargeTimerInterval) {
                clearInterval(rechargeTimerInterval);
                rechargeTimerInterval = null;
            }
            energyText.textContent = `üîã ${Math.floor(currentEnergy)} / ${maxEnergy}`;
            return;
        }
    }

    // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è —â–µ –Ω–µ –≤—ñ–¥–Ω–æ–≤–∏–ª–∞—Å—è, –ø–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ª—ñ–∫
    const displayHours = Math.floor(timeLeftMs / (1000 * 60 * 60));
    const displayMinutes = Math.floor((timeLeftMs % (1000 * 60 * 60)) / (1000 * 60));
    const displaySeconds = Math.floor((timeLeftMs % (1000 * 60)) / 1000);

    energyText.textContent = `‚è≥ ${displayHours}–≥ ${String(displayMinutes).padStart(2, '0')}—Ö–≤ ${String(displaySeconds).padStart(2, '0')}—Å`;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
function startRechargeTimerDisplay() {
    if (!rechargeTimerInterval) {
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
        rechargeTimerInterval = setInterval(updateRechargeTimerDisplay, 1000);
        updateRechargeTimerDisplay(); // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–¥—Ä–∞–∑—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞—Ç—Ä–∏–º–∫–∏
    }
}


function checkUpgradeAvailability() {
    upgrade1Button.disabled = score < upgrade1Cost;
    upgrade2Button.disabled = score < upgrade2Cost;
}

// --- Energy Recharge Logic (–û–ù–û–í–õ–ï–ù–û) ---
function rechargeEnergyOncePerDay() {
    const now = Date.now();
    const fullDayInMs = 24 * 60 * 60 * 1000;

    // –ï–Ω–µ—Ä–≥—ñ—è –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∞ –î–û–°–Ø–ì–õ–ê 0 –Ü –ø—Ä–æ–π—à–ª–æ 24 –≥–æ–¥–∏–Ω–∏
    if (currentEnergy === 0 && (now - lastEnergyZeroTime >= fullDayInMs)) {
        currentEnergy = maxEnergy; // –ü–æ–≤–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        // lastEnergyZeroTime –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—ñ, –∫–æ–ª–∏ –µ–Ω–µ—Ä–≥—ñ—è —Å—Ç–∞–ª–∞ 0,
        // —Ü–µ –≤–∞–∂–ª–∏–≤–æ, —è–∫—â–æ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –∑–Ω–∞—Ç–∏, –∫–æ–ª–∏ –≤–æ–Ω–∞ –±—É–ª–∞ *–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞*.
        // –î–ª—è –≤–∞—à–æ—ó –ø–æ—Ç–æ—á–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ (24 –≥–æ–¥. –ø—ñ—Å–ª—è 0) —ó—ó –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Ç—É—Ç.
        updateDisplay(); // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∏—Å–ø–ª–µ–π, —è–∫–∏–π –ø–µ—Ä–µ–º–∫–Ω–µ—Ç—å—Å—è –∑ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ –ø–æ–≤–Ω—É –µ–Ω–µ—Ä–≥—ñ—é
        savePlayerData();
        console.log("Energy fully recharged after 24 hours of being 0.");
        // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–ø–ª–∏–≤–∞—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ï–Ω–µ—Ä–≥—ñ—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞!"
    }
    // –í—Å—ñ —ñ–Ω—à—ñ –≤–∏–ø–∞–¥–∫–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —Ñ—É–Ω–∫—Ü—ñ—î—é updateRechargeTimerDisplay
}

// --- Firebase: Load & Save ---
async function loadPlayerData() {
    if (!db) {
        console.error("Firestore not initialized yet. Cannot load player data.");
        return;
    }
    if (!telegramUserId) {
        telegramUserId = 'test_user_local';
        console.warn("Telegram User ID not available for load. Running in test mode.");
        updateDisplay();
        startAutoClicker();
        return;
    }

    try {
        const doc = await db.collection("players").doc(telegramUserId).get();
        if (doc.exists) {
            const data = doc.data();
            score = data.score || 0;
            mainBalance = data.mainBalance || 0;
            clickPower = data.clickPower || 1;
            autoClickPower = data.autoClickPower || 0;
            upgrade1Cost = data.upgrade1Cost || 100;
            upgrade2Cost = data.upgrade2Cost || 500;
            currentEnergy = data.currentEnergy !== undefined ? data.currentEnergy : maxEnergy;
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ lastEnergyZeroTime. –í–∞–∂–ª–∏–≤–æ: —è–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è –ù–ï 0,
            // lastEnergyZeroTime –º–∞—î –±—É—Ç–∏ 0 –∞–±–æ null, —â–æ–± —Ç–∞–π–º–µ—Ä –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞–≤—Å—è.
            // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è 0, –∞ —á–∞—Å—É –Ω–µ–º–∞—î, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞—Ä–∞–∑, —â–æ–± –ø–æ—á–∞—Ç–∏ –≤—ñ–¥–ª—ñ–∫.
            lastEnergyZeroTime = data.lastEnergyZeroTime || 0; // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ
            if (currentEnergy === 0 && !lastEnergyZeroTime) {
                lastEnergyZeroTime = Date.now(); // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è 0, –∞–ª–µ —á–∞—Å –Ω–µ –±—É–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π
            }


        } else {
            console.log("No player data found for", telegramUserId, ". Starting new game.");
            // –î–ª—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è –µ–Ω–µ—Ä–≥—ñ—è –ø–æ–≤–Ω–∞, —Ç–æ–º—É lastEnergyZeroTime = 0
            lastEnergyZeroTime = 0;
        }
        updateDisplay(); // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∏—Å–ø–ª–µ–π, —â–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        startAutoClicker();
        rechargeEnergyOncePerDay(); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –≤–∂–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é
    } catch (e) {
        console.error("Error loading player data:", e);
        updateDisplay();
    }
}

async function savePlayerData() {
    if (!db || !telegramUserId || telegramUserId === 'test_user_local') {
        return;
    }
    try {
        await db.collection("players").doc(telegramUserId).set({
            score, mainBalance, clickPower, autoClickPower,
            upgrade1Cost, upgrade2Cost, currentEnergy,
            lastEnergyZeroTime // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ lastEnergyZeroTime
        }, { merge: true });
    } catch (e) {
        console.error("Error saving player data:", e);
    }
}

// --- Autoclicker ---
function startAutoClicker() {
    if (autoClickInterval) clearInterval(autoClickInterval);
    if (autoClickPower > 0) {
        autoClickInterval = setInterval(() => {
            score += autoClickPower;
            updateDisplay();
            if (telegramUserId !== 'test_user_local') {
                savePlayerData();
            }
        }, 1000);
    }
}

// --- Loading Screen ---
function startLoadingProgress() {
    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 5;
        if (progress > 99) progress = 99;
        progressBarFill.style.width = `${progress}%`;
        loadingText.textContent = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è... ${Math.floor(progress)}%`;
        if (progress === 99) {
            clearInterval(interval);
            setTimeout(() => {
                loadingScreen.classList.add('hidden');
                gameScreen.classList.remove('hidden');
            }, 4000);
        }
    }, 50);
}


// --- Main Game Initialization Logic ---
function initializeGameAfterFirebase() {
    if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.ready();
        setTimeout(() => tg.expand(), 100);

        if (tg.initDataUnsafe?.user?.id) {
            telegramUserId = tg.initDataUnsafe.user.id.toString();
            debugUserIdElement.textContent = "ID: " + telegramUserId;
            console.log("Telegram User ID obtained:", telegramUserId);
            loadPlayerData();
        } else {
            console.warn("Telegram User ID not available from tg.initDataUnsafe.user.id.");
            debugUserIdElement.textContent = "ID: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (—Ç–µ—Å—Ç)";
            loadPlayerData();
        }
    } else {
        console.warn("Telegram Web App API not found. Please open in Telegram to get user ID.");
        debugUserIdElement.textContent = "ID: API Telegram –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";
        setTimeout(() => {
            loadingScreen.classList.add('hidden');
            gameScreen.classList.remove('hidden');
            loadPlayerData();
        }, 2000);
    }
}


// --- Event Listeners and Initial Setup (–û–ù–û–í–õ–ï–ù–û clickButton.addEventListener) ---
document.addEventListener('DOMContentLoaded', () => {
    startLoadingProgress();

    // Click handler for the main coin
    clickButton.addEventListener('click', (event) => {
        if (currentEnergy > 0) {
            score += clickPower;
            currentEnergy--;
            
            // –ù–û–í–ï: –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è —â–æ–π–Ω–æ —Å—Ç–∞–ª–∞ 0, —Ñ—ñ–∫—Å—É—î–º–æ —Ü–µ–π —á–∞—Å
            if (currentEnergy === 0) {
                lastEnergyZeroTime = Date.now();
                console.log("Energy hit 0. Recording time:", lastEnergyZeroTime);
            }
            updateDisplay(); // updateDisplay –≤–∏–∫–ª–∏—á–µ updateEnergyDisplay, —è–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
            savePlayerData(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ–∫—É

            try {
                coinClickSound.currentTime = 0;
                coinClickSound.play();
            } catch (e) {
                console.error("Sound error:", e);
            }

            // Floating text effect
            const floatingText = document.createElement('div');
            floatingText.classList.add('floating-text');
            floatingText.textContent = `+${clickPower}`;
            floatingText.style.left = `${event.clientX}px`;
            floatingText.style.top = `${event.clientY - 20}px`;
            gameScreen.appendChild(floatingText);
            floatingText.addEventListener('animationend', () => {
                floatingText.remove();
            });
        } else {
            console.log("Energy depleted. Cannot click.");
            // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫ "–ï–Ω–µ—Ä–≥—ñ—è –≤–∏—á–µ—Ä–ø–∞–Ω–∞!"
        }
    });

    // Upgrade buttons (–±–µ–∑ –∑–º—ñ–Ω)
    upgrade1Button.addEventListener('click', () => {
        if (score >= upgrade1Cost) {
            score -= upgrade1Cost;
            clickPower += 1;
            upgrade1Cost = Math.floor(upgrade1Cost * 1.5);
            updateDisplay();
            savePlayerData();
        }
    });

    upgrade2Button.addEventListener('click', () => {
        if (score >= upgrade2Cost) {
            score -= upgrade2Cost;
            autoClickPower += 1;
            upgrade2Cost = Math.floor(upgrade2Cost * 2);
            startAutoClicker();
            updateDisplay();
            savePlayerData();
        }
    });

    setInterval(savePlayerData, 5000);
});
          
