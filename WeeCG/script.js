// script.js - –ü–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ Firebase —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏

// --- Firebase Initialization START ---
const firebaseConfig = {
    apiKey: "AIzaSyAt5GlmmqhW6IeDd3oFB0yq2xQARd8YPNs", // <<< –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–ò–ô API KEY
    authDomain: "weegamebot-7c44b.firebaseapp.com", // <<< –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–ò–ô authDomain
    databaseURL: "https://weegamebot-7c44b-default-rtdb.firebaseio.com", // <<< –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–ò–ô databaseURL (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ RTDB, –¥–ª—è Firestore –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    projectId: "weegamebot-7c44b", // <<< –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–ò–ô projectId
    storageBucket: "weegamebot-7c44b.appspot.com", // <<< –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–ò–ô storageBucket
    messagingSenderId: "1052981895153", // <<< –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–ò–ô messagingSenderId
    appId: "1:1052981895153:web:0c8426bf8e5b97729a6e50" // <<< –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–ò–ô appId
};

let db; // –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è Firebase Firestore
let firebaseInitialized = false; // –§–ª–∞–≥ —Å—Ç–∞–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Firebase

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î Firebase SDK —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–æ–¥–∞—Ç–æ–∫.
 * –ü–æ–≤–µ—Ä—Ç–∞—î Promise, —è–∫–∏–π —Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.
 */
const loadFirebaseSDK = () => {
    return new Promise((resolve, reject) => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ Firebase –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (typeof firebase !== 'undefined' && firebase.apps.length) {
            db = firebase.firestore();
            firebaseInitialized = true;
            console.log("Firebase SDK already loaded and initialized.");
            return resolve();
        }

        const firebaseAppScript = document.createElement('script');
        firebaseAppScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"; // –í–∏ –º–æ–∂–µ—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –≤–µ—Ä—Å—ñ—é, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        firebaseAppScript.onload = () => {
            const firebaseFirestoreScript = document.createElement('script');
            firebaseFirestoreScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"; // –í–∏ –º–æ–∂–µ—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –≤–µ—Ä—Å—ñ—é, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            firebaseFirestoreScript.onload = () => {
                try {
                    const app = firebase.initializeApp(firebaseConfig);
                    db = firebase.firestore();
                    firebaseInitialized = true;
                    console.log("Firebase Firestore initialized successfully.");
                    resolve();
                } catch (e) {
                    console.error("Error initializing Firebase:", e);
                    reject(e);
                }
            };
            firebaseFirestoreScript.onerror = () => {
                console.error("Failed to load firebase-firestore.js");
                reject(new Error("Failed to load firebase-firestore.js"));
            };
            document.head.appendChild(firebaseFirestoreScript);
        };
        firebaseAppScript.onerror = () => {
            console.error("Failed to load firebase-app.js");
            reject(new Error("Failed to load firebase-app.js"));
        };
        document.head.appendChild(firebaseAppScript);
    });
};
// --- Firebase Initialization END ---

// --- DOM Elements (Game Screen) ---
const scoreElement = document.getElementById('score');
const clickButton = document.getElementById('clickButton');
const upgrade1Button = document.getElementById('upgrade1');
const upgrade1CostElement = document.getElementById('upgrade1Cost');
const upgrade2Button = document.getElementById('upgrade2');
const upgrade2CostElement = document.getElementById('upgrade2Cost');
const debugUserIdElement = document.getElementById('debugUserId'); // –î–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è Telegram ID

const loadingScreen = document.getElementById('loading-screen');
const gameScreen = document.getElementById('game-screen');
const progressBarFill = document.getElementById('progressBarFill');
const loadingText = document.getElementById('loadingText');

const mainBalanceElement = document.getElementById('mainBalance'); // –î–ª—è WEE Balance –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–º—É –µ–∫—Ä–∞–Ω—ñ
const energyBarFill = document.getElementById('energyBarFill');
const energyText = document.getElementById('energyText');

// --- DOM Elements (Wallet Screen) ---
const walletScreen = document.getElementById('wallet-screen');
const weeBalanceDisplay = document.getElementById('weeBalance');
const walletCoinBalanceDisplay = document.getElementById('walletCoinBalance');
const exchangeAmountInput = document.getElementById('exchangeAmount');
const exchangeButton = document.getElementById('exchangeButton');

// --- DOM Elements (Leaderboard Screen) ---
const leaderboardScreen = document.getElementById('leaderboard-screen');
const leaderboardList = document.getElementById('leaderboardList');
const refreshLeaderboardButton = document.getElementById('refreshLeaderboard');

// --- DOM Elements (Tasks Screen) ---
const tasksScreen = document.getElementById('tasks-screen');
const tasksList = document.getElementById('tasksList');

// --- Bottom Navigation ---
const navItems = document.querySelectorAll('.nav-item');


// --- Game Variables ---
let score = 0;
let mainBalance = 0; // –¶–µ WEE Balance
let clickPower = 1;
let autoClickPower = 0;
let upgrade1Cost = 100;
let upgrade2Cost = 500;
let telegramUserId = null; // –ë—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑ Telegram Web App

const MAX_ENERGY = 100;
let currentEnergy = MAX_ENERGY;
let lastEnergyRechargeTime = 0; // Unix timestamp
let autoClickInterval = null;

const WEE_EXCHANGE_RATE = 1000000; // 1,000,000 –º–æ–Ω–µ—Ç = 1 WEE

// –ó–∞–±–µ–∑–ø–µ—á—Ç–µ, —â–æ —Ñ–∞–π–ª coin_click.mp3 –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É —Ç—ñ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —â–æ –π index.html, –∞–±–æ –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —à–ª—è—Ö
const coinClickSound = new Audio('coin_click.mp3');
coinClickSound.volume = 0.5;

// --- Task Data (Defined locally, ideally would come from backend/Firebase config) ---
// –ü—Ä–∏–º—ñ—Ç–∫–∞: –í —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –º–æ–∂–µ –±—É—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏—Å—è –∑ Firebase.
const allAvailableTasks = [
    { id: 'task1', name: "–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è", description: "–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª.", reward: "500 ü™ô", type: "coins", value: 500, checkCondition: "manual" },
    { id: 'task2', name: "–ü–µ—Ä—à–∞ –ø–æ–∫—É–ø–∫–∞", description: "–ö—É–ø—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.", reward: "0.5 WEE", type: "wee", value: 0.5, checkCondition: "purchase" },
    { id: 'task3', name: "–ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∞", description: "–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤ –≥—Ä—É.", reward: "1.0 WEE", type: "wee", value: 1.0, checkCondition: "manual" },
    { id: 'task4', name: "–ù–∞—Ç–∏—Å–Ω–∏ 1000 —Ä–∞–∑—ñ–≤", description: "–ö–ª—ñ–∫–Ω—ñ—Ç—å –º–æ–Ω–µ—Ç—É 1000 —Ä–∞–∑—ñ–≤.", reward: "1000 ü™ô", type: "coins", value: 1000, progressGoal: 1000, progressType: "clicks" },
    { id: 'task5', name: "–î–æ—Å—è–≥–Ω–∏ 10000 –º–æ–Ω–µ—Ç", description: "–ù–∞–∑–±–∏—Ä–∞–π—Ç–µ 10000 –º–æ–Ω–µ—Ç.", reward: "0.1 WEE", type: "wee", value: 0.1, progressGoal: 10000, progressType: "score" },
];
let playerTasksStatus = {}; // –ó–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ { 'taskId': true/false, 'task4_progress': 500 }


// --- UI Update ---
function updateDisplay() {
    scoreElement.textContent = Math.floor(score).toLocaleString();
    mainBalanceElement.textContent = parseFloat(mainBalance).toFixed(2);
    upgrade1CostElement.textContent = Math.floor(upgrade1Cost).toLocaleString();
    upgrade2CostElement.textContent = Math.floor(upgrade2Cost).toLocaleString();
    checkUpgradeAvailability();
    updateEnergyDisplay();

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ Wallet Screen, —è–∫—â–æ –≤—ñ–Ω –∞–∫—Ç–∏–≤–Ω–∏–π
    if (!walletScreen.classList.contains('hidden')) {
        weeBalanceDisplay.textContent = parseFloat(mainBalance).toFixed(2);
        walletCoinBalanceDisplay.textContent = Math.floor(score).toLocaleString();
    }
}

function updateEnergyDisplay() {
    const percentage = (currentEnergy / MAX_ENERGY) * 100;
    energyBarFill.style.width = `${percentage}%`;
    const icon = currentEnergy <= 0 ? 'ü™´' : 'üîã';
    energyText.textContent = `${icon} ${Math.floor(currentEnergy)} / ${MAX_ENERGY}`;

    if (currentEnergy <= 0) {
        clickButton.disabled = true;
        clickButton.classList.add('no-energy');
    } else {
        clickButton.disabled = false;
        clickButton.classList.remove('no-energy');
    }
}

function checkUpgradeAvailability() {
    upgrade1Button.disabled = score < upgrade1Cost;
    upgrade2Button.disabled = score < upgrade2Cost;
}

// --- Energy Recharge Logic ---
function rechargeEnergyLogic() {
    const now = Date.now();
    const fullDay = 24 * 60 * 60 * 1000; // 24 –≥–æ–¥–∏–Ω–∏ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ–π—à–ª–∞ –ø–æ–≤–Ω–∞ –¥–æ–±–∞ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
    if (currentEnergy < MAX_ENERGY && (now - lastEnergyRechargeTime) >= fullDay) {
        currentEnergy = MAX_ENERGY;
        lastEnergyRechargeTime = now; // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        updateEnergyDisplay();
        savePlayerData();
        console.log("Energy recharged to max.");
    } else if (currentEnergy === MAX_ENERGY) {
        // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è –≤–∂–µ –ø–æ–≤–Ω–∞, –æ–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å, —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–∏–π –≤—ñ–¥–ª—ñ–∫ –±—É–≤ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º
        lastEnergyRechargeTime = now;
        savePlayerData();
    }
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, —è–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è –Ω–µ –ø–æ–≤–Ω–∞
    // –ê–±–æ –Ω–∞ –ø–æ–≤–Ω—É –¥–æ–±—É, —è–∫—â–æ –≤–æ–Ω–∞ –ø–æ–≤–Ω–∞
    const timeToNextRecharge = (currentEnergy < MAX_ENERGY) ? ENERGY_RECOVERY_INTERVAL_MS : (fullDay - (now - lastEnergyRechargeTime) % fullDay);
    setTimeout(rechargeEnergyLogic, timeToNextRecharge);
}

// Constants for energy recovery (add these at the top with other constants)
const ENERGY_RECOVERY_RATE = 1; // 1 –æ–¥–∏–Ω–∏—Ü—è –µ–Ω–µ—Ä–≥—ñ—ó
const ENERGY_RECOVERY_INTERVAL_MS = 60 * 1000; // –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

function startContinuousEnergyRecovery() {
    setInterval(() => {
        if (currentEnergy < MAX_ENERGY) {
            currentEnergy = Math.min(MAX_ENERGY, currentEnergy + ENERGY_RECOVERY_RATE);
            updateDisplay();
            savePlayerData(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
        }
    }, ENERGY_RECOVERY_INTERVAL_MS);
}

// --- Firebase: Load & Save Player Data ---
async function loadPlayerData() {
    console.log("Attempting to load player data...");
    if (!firebaseInitialized || !db) {
        console.error("Firestore not initialized or Firebase not ready. Cannot load player data.");
        // –ü–æ–∫–∞–∑—É—î–º–æ –≥—Ä—É –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏, —è–∫—â–æ Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
        telegramUserId = 'test_user_local'; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID, —â–æ–± –≥—Ä–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—è
        debugUserIdElement.textContent = "ID: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç)";
        updateDisplay();
        startAutoClicker();
        startContinuousEnergyRecovery(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
        // rechargeEnergyLogic(); // –¶—é —Ñ—É–Ω–∫—Ü—ñ—é –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏, —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è startContinuousEnergyRecovery
        hideLoadingScreen();
        return;
    }

    if (!telegramUserId) {
        console.warn("Telegram User ID not available for load. Running in test mode.");
        telegramUserId = 'test_user_local'; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
        debugUserIdElement.textContent = "ID: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç)";
    } else {
        debugUserIdElement.textContent = "ID: " + telegramUserId;
    }

    try {
        const doc = await db.collection("players").doc(telegramUserId).get();
        if (doc.exists) {
            const data = doc.data();
            score = data.score || 0;
            mainBalance = data.mainBalance || 0;
            clickPower = data.clickPower || 1;
            autoClickPower = data.autoClickPower || 0;
            upgrade1Cost = data.upgrade1Cost || 100;
            upgrade2Cost = data.upgrade2Cost || 500;
            currentEnergy = data.currentEnergy || MAX_ENERGY;
            lastEnergyRechargeTime = data.lastEnergyRechargeTime || Date.now(); // –Ø–∫—â–æ –Ω–µ–º–∞—î, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞—Ä–∞–∑
            playerTasksStatus = data.tasks || {}; // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω—å
            console.log("Player data loaded for", telegramUserId, ":", data);
        } else {
            console.log("No player data found for", telegramUserId, ". Starting new game.");
            lastEnergyRechargeTime = Date.now(); // –î–ª—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è
            playerTasksStatus = {};
            allAvailableTasks.forEach(task => {
                // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è –∑–∞–≤–¥–∞–Ω—å, —è–∫—â–æ –≤—ñ–Ω —î
                if (task.progressType) {
                    playerTasksStatus[`${task.id}_progress`] = 0;
                }
            });
        }
    } catch (e) {
        console.error("Error loading player data:", e);
        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –≥—Ä–∞ –≤—Å–µ –æ–¥–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
    } finally {
        updateDisplay();
        startAutoClicker();
        startContinuousEnergyRecovery(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
        // rechargeEnergyLogic(); // –ú–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏, —è–∫—â–æ startContinuousEnergyRecovery –ø—Ä–∞—Ü—é—î
        hideLoadingScreen(); // –ó–∞–≤–∂–¥–∏ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –µ–∫—Ä–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Å–ø—Ä–æ–±–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    }
}

async function savePlayerData() {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ Firebase —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —ñ —î —Ä–µ–∞–ª—å–Ω–∏–π telegramUserId
    if (!firebaseInitialized || !db || !telegramUserId || telegramUserId === 'test_user_local') {
        // console.warn("Cannot save data: Firestore not initialized or Telegram User ID is test ID/not available.");
        return;
    }
    try {
        await db.collection("players").doc(telegramUserId).set({
            score: Math.floor(score),
            mainBalance: parseFloat(mainBalance.toFixed(2)),
            clickPower,
            autoClickPower,
            upgrade1Cost: Math.floor(upgrade1Cost),
            upgrade2Cost: Math.floor(upgrade2Cost),
            currentEnergy: Math.floor(currentEnergy),
            lastEnergyRechargeTime,
            tasks: playerTasksStatus // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω—å
        }, { merge: true });
        // console.log("Player data saved for", telegramUserId);
    } catch (e) {
        console.error("Error saving player data:", e);
    }
}

// --- Autoclicker ---
function startAutoClicker() {
    if (autoClickInterval) clearInterval(autoClickInterval); // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
    if (autoClickPower > 0) {
        autoClickInterval = setInterval(() => {
            score += autoClickPower;
            updateDisplay();
            savePlayerData(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ—Å–ª—è –∞–≤—Ç–æ–∫–ª—ñ–∫—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        }, 1000); // –ö–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
    }
}

// --- Loading Screen Logic ---
function startLoadingProgress() {
    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 5; // –ù–µ–≤–µ–ª–∏–∫–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø—Ä–∏—Ä—ñ—Å—Ç –¥–ª—è "–∂–∏–≤–æ—Å—Ç—ñ"
        if (progress > 95) progress = 95; // –ú–∞–∫—Å–∏–º—É–º 95%, —â–æ–± –æ—Å—Ç–∞–Ω–Ω—ñ 5% –¥–æ—á–µ–∫–∞–ª–∏—Å—è Firebase
        progressBarFill.style.width = `${progress}%`;
        loadingText.textContent = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è... ${Math.floor(progress)}%`;

        if (progress >= 95 && firebaseInitialized) {
            clearInterval(interval);
            // –ü—Ä–æ–≥—Ä–µ—Å –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è –Ω–∞ 95%, —Ä–µ—à—Ç–∞ 5% —á–µ–∫–∞—î –Ω–∞ initializeGameAfterFirebase()
        }
    }, 50);
}

function hideLoadingScreen() {
    console.log("Hiding loading screen and showing game screen.");
    loadingScreen.classList.add('hidden');
    gameScreen.classList.remove('hidden'); // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –µ–∫—Ä–∞–Ω –≥—Ä–∏
}

// --- Wallet Screen Logic ---
exchangeButton.addEventListener('click', async () => {
    const amountToExchange = parseInt(exchangeAmountInput.value);

    if (isNaN(amountToExchange) || amountToExchange < WEE_EXCHANGE_RATE) {
        alert(`–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É, –±—ñ–ª—å—à—É –∞–±–æ —Ä—ñ–≤–Ω—É ${WEE_EXCHANGE_RATE.toLocaleString()} –º–æ–Ω–µ—Ç.`);
        return;
    }

    if (score >= amountToExchange) {
        const weeEarned = amountToExchange / WEE_EXCHANGE_RATE;
        score -= amountToExchange;
        mainBalance += weeEarned; // –û–Ω–æ–≤–ª—é—î–º–æ WEE –±–∞–ª–∞–Ω—Å

        alert(`–£—Å–ø—ñ—à–Ω–æ –æ–±–º—ñ–Ω—è–Ω–æ ${amountToExchange.toLocaleString()} –º–æ–Ω–µ—Ç –Ω–∞ ${weeEarned.toFixed(2)} WEE!`);
        exchangeAmountInput.value = ''; // –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ –≤–≤–æ–¥—É
        updateDisplay();
        savePlayerData(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –±–∞–ª–∞–Ω—Å–∏
    } else {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ–±–º—ñ–Ω—É!');
    }
});

// --- Leaderboard Screen Logic ---
refreshLeaderboardButton.addEventListener('click', () => {
    fetchLeaderboardData();
});

async function fetchLeaderboardData() {
    leaderboardList.innerHTML = '<li style="text-align:center;">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É...</li>';
    if (!firebaseInitialized || !db) {
        leaderboardList.innerHTML = '<li style="text-align:center;">–ü–æ–º–∏–ª–∫–∞: Firebase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.</li>';
        console.error("Cannot fetch leaderboard: Firebase not initialized.");
        return;
    }

    try {
        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø-N –≥—Ä–∞–≤—Ü—ñ–≤ –∑ Firebase, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞ score
        // –ü—Ä–∏–º—ñ—Ç–∫–∞: –î–ª—è –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤ —Ç–∞–∫—É –æ–ø–µ—Ä–∞—Ü—ñ—é –∫—Ä–∞—â–µ —Ä–æ–±–∏—Ç–∏ —á–µ—Ä–µ–∑ Cloud Functions
        // –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Firebase Realtime Database –¥–ª—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—ñ–≤.
        // –¢–∞–∫–æ–∂ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏ Firebase, —è–∫—ñ –¥–æ–∑–≤–æ–ª—è—é—Ç—å —á–∏—Ç–∞—Ç–∏ "score" —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤.
        const playersRef = db.collection("players");
        const snapshot = await playersRef.orderBy("score", "desc").limit(20).get(); // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø-20

        const leaders = [];
        let rank = 1;
        snapshot.forEach(doc => {
            const data = doc.data();
            // –í–∏–∫–ª—é—á–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É, —è–∫—â–æ —Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (doc.id === 'test_user_local') return;

            // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤–æ–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –¥–∞–Ω–∏—Ö –ø—Ä–æ –≥—Ä–∞–≤—Ü—è,
            // —ñ–Ω–∞–∫—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∞–±–æ –ø—Ä–æ—Å—Ç–æ "–ì—Ä–∞–≤–µ—Ü—å N"
            let playerName = data.name || `–ì—Ä–∞–≤–µ—Ü—å ${rank}`;
            if (doc.id === telegramUserId) {
                playerName = "–í–∏"; // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
            }

            leaders.push({
                rank: rank++,
                name: playerName,
                score: data.score || 0
            });
        });
        displayLeaderboard(leaders);
    } catch (error) {
        console.error('Error fetching leaderboard:', error);
        leaderboardList.innerHTML = '<li style="text-align:center;">–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥.</li>';
    }
}

function displayLeaderboard(leaders) {
    leaderboardList.innerHTML = '';
    if (leaders.length === 0) {
        leaderboardList.innerHTML = '<li style="text-align:center;">–õ—ñ–¥–µ—Ä–±–æ—Ä–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π.</li>';
        return;
    }
    leaders.forEach(leader => {
        const li = document.createElement('li');
        li.classList.add('leaderboard-item');
        // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å 'current-player' –¥–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
        if (leader.name === "–í–∏") {
            li.classList.add('current-player');
        }
        li.innerHTML = `
            <span class="rank">${leader.rank}.</span>
            <span class="name">${leader.name}</span>
            <span class="score">${leader.score.toLocaleString()} ü™ô</span>
        `;
        leaderboardList.appendChild(li);
    });
}

// --- Tasks Screen Logic ---
async function fetchTasksData() {
    tasksList.innerHTML = '<li style="text-align:center;">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å...</li>';
    if (!firebaseInitialized || !db) {
        tasksList.innerHTML = '<li style="text-align:center;">–ü–æ–º–∏–ª–∫–∞: Firebase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.</li>';
        console.error("Cannot fetch tasks: Firebase not initialized.");
        return;
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ playerTasksStatus, —è–∫–∏–π –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –∑ Firebase
    const tasksToDisplay = allAvailableTasks.map(task => {
        let currentProgress = 0;
        if (task.progressType) {
            currentProgress = playerTasksStatus[`${task.id}_progress`] || 0;
        }
        return {
            ...task,
            completed: playerTasksStatus[task.id] === true,
            currentProgress: currentProgress // –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
        };
    });
    displayTasks(tasksToDisplay);
}

function displayTasks(tasks) {
    tasksList.innerHTML = '';
    if (tasks.length === 0) {
        tasksList.innerHTML = '<li style="text-align:center;">–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.</li>';
        return;
    
