// script.js - –û–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ Firebase —Ç–∞ –ª–æ–≥—ñ–∫–∏ –≥—Ä–∏

// --- Firebase Initialization START ---
const firebaseConfig = {
    apiKey: "AIzaSyAt5GlmmqhW6IeDd3oFB0yq2xQARd8YPNs",
    authDomain: "weegamebot-7c44b.firebaseapp.com",
    databaseURL: "https://weegamebot-7c44b-default-rtdb.firebaseio.com",
    projectId: "weegamebot-7c44b",
    storageBucket: "weegamebot-7c44b.appspot.com",
    messagingSenderId: "1052981895153",
    appId: "1:1052981895153:web:0c8426bf8e5b97729a6e50"
};

// –ó—Ä–æ–±–∏–º–æ db –≥–ª–æ–±–∞–ª—å–Ω–æ—é –∑–º—ñ–Ω–Ω–æ—é
let db;
let firebaseInitialized = false; // –§–ª–∞–≥, —â–æ–± –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é Firebase

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Firebase SDK
const loadFirebaseSDK = () => {
    return new Promise((resolve, reject) => {
        const firebaseAppScript = document.createElement('script');
        firebaseAppScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js";
        firebaseAppScript.onload = () => {
            const firebaseFirestoreScript = document.createElement('script');
            firebaseFirestoreScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js";
            firebaseFirestoreScript.onload = () => {
                try {
                    const app = firebase.initializeApp(firebaseConfig);
                    db = firebase.firestore();
                    firebaseInitialized = true;
                    // console.log("Firebase Firestore initialized.");
                    resolve();
                } catch (e) {
                    console.error("Error initializing Firebase:", e);
                    reject(e);
                }
            };
            firebaseFirestoreScript.onerror = reject;
            document.head.appendChild(firebaseFirestoreScript);
        };
        firebaseAppScript.onerror = reject;
        document.head.appendChild(firebaseAppScript);
    });
};
// --- Firebase Initialization END ---

// --- DOM Elements ---
const scoreElement = document.getElementById('score');
const clickButton = document.getElementById('clickButton');
const upgrade1Button = document.getElementById('upgrade1');
const upgrade1CostElement = document.getElementById('upgrade1Cost');
const upgrade2Button = document.getElementById('upgrade2');
const upgrade2CostElement = document.getElementById('upgrade2Cost');
const debugUserIdElement = document.getElementById('debugUserId');

const loadingScreen = document.getElementById('loading-screen');
const gameScreen = document.getElementById('game-screen');
const progressBarFill = document.getElementById('progressBarFill');
const loadingText = document.getElementById('loadingText');

const mainBalanceElement = document.getElementById('mainBalance');
const energyBarFill = document.getElementById('energyBarFill');
const energyText = document.getElementById('energyText');

// --- Game Variables ---
let score = 0;
let mainBalance = 0; // –¶–µ WEE Balance
let clickPower = 1;
let autoClickPower = 0;
let upgrade1Cost = 100;
let upgrade2Cost = 500;
let telegramUserId = null;

let currentEnergy = 100;
const maxEnergy = 100;
let lastEnergyRechargeTime = 0; // Unix timestamp
let autoClickInterval = null; // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ null –¥–ª—è —á—ñ—Ç–∫–æ—Å—Ç—ñ

const coinClickSound = new Audio('coin_click.mp3'); // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
coinClickSound.volume = 0.5;

// --- UI Update ---
function updateDisplay() {
    scoreElement.textContent = Math.floor(score).toLocaleString(); // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    mainBalanceElement.textContent = parseFloat(mainBalance).toFixed(2); // WEE Balance, 2 –∑–Ω–∞–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏
    upgrade1CostElement.textContent = Math.floor(upgrade1Cost).toLocaleString();
    upgrade2CostElement.textContent = Math.floor(upgrade2Cost).toLocaleString();
    checkUpgradeAvailability();
    updateEnergyDisplay();
}

function updateEnergyDisplay() {
    const percentage = (currentEnergy / maxEnergy) * 100;
    energyBarFill.style.width = `${percentage}%`;
    const icon = currentEnergy <= 0 ? 'ü™´' : 'üîã';
    energyText.textContent = `${icon} ${Math.floor(currentEnergy)} / ${maxEnergy}`;

    // –î–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫ –ø—Ä–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–Ω—ñ –µ–Ω–µ—Ä–≥—ñ—ó
    if (currentEnergy <= 0) {
        clickButton.disabled = true;
        clickButton.classList.add('no-energy'); // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó/—Å—Ç–∏–ª—é
    } else {
        clickButton.disabled = false;
        clickButton.classList.remove('no-energy');
    }
}

function checkUpgradeAvailability() {
    upgrade1Button.disabled = score < upgrade1Cost;
    upgrade2Button.disabled = score < upgrade2Cost;
}

// --- Energy Recharge ---
// –ï–Ω–µ—Ä–≥—ñ—è –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è –¥–æ –º–∞–∫—Å–∏–º—É–º—É, —è–∫—â–æ –ø—Ä–æ–π—à–ª–æ –±—ñ–ª—å—à–µ 24 –≥–æ–¥–∏–Ω
function rechargeEnergyLogic() {
    const now = Date.now();
    const fullDay = 24 * 60 * 60 * 1000; // 24 –≥–æ–¥–∏–Ω–∏ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

    // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—ó –º–µ–Ω—à–µ –º–∞–∫—Å–∏–º—É–º—É –Ü –ø—Ä–æ–π—à–ª–æ –±—ñ–ª—å—à–µ –¥–æ–±–∏ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Å—É
    if (currentEnergy < maxEnergy && (now - lastEnergyRechargeTime) >= fullDay) {
        currentEnergy = maxEnergy;
        lastEnergyRechargeTime = now; // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∂–µ–Ω–Ω—è
        updateEnergyDisplay();
        savePlayerData();
        console.log("Energy recharged to max.");
    } else if (currentEnergy === maxEnergy) {
        // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è –≤–∂–µ –ø–æ–≤–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∂–µ–Ω–Ω—è.
        // –¶–µ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–ª—ñ–∫—É –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 24 –≥–æ–¥–∏–Ω, —è–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –¥–æ–≤–≥–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–≤.
        lastEnergyRechargeTime = now;
        savePlayerData();
    }
    // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—ó –º–µ–Ω—à–µ max, –∞–ª–µ 24 –≥–æ–¥–∏–Ω–∏ —â–µ –Ω–µ –ø—Ä–æ–π—à–ª–∏, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ (—á–µ–∫–∞—î–º–æ —Ä–µ–≥–µ–Ω)
}

// --- Firebase: Load & Save ---
async function loadPlayerData() {
    if (!firebaseInitialized || !db) {
        console.error("Firestore not initialized yet. Cannot load player data.");
        // –ú–æ–∂–ª–∏–≤–æ, —Ç—É—Ç –≤–∞—Ä—Ç–æ –¥–æ–¥–∞—Ç–∏ –∑–∞—Ç—Ä–∏–º–∫—É —ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É,
        // –∞–±–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
        return;
    }
    if (!telegramUserId) {
        // –¶–µ –±—É–¥–µ —Ç—ñ–ª—å–∫–∏ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏ –ø–æ–∑–∞ Telegram Web App
        telegramUserId = 'test_user_local';
        console.warn("Telegram User ID not available. Running in test mode.");
        debugUserIdElement.textContent = "ID: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (—Ç–µ—Å—Ç)";
        updateDisplay();
        startAutoClicker();
        rechargeEnergyLogic(); // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –µ–∫—Ä–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        loadingScreen.classList.add('hidden');
        gameScreen.classList.remove('hidden');
        return;
    }

    try {
        const doc = await db.collection("players").doc(telegramUserId).get();
        if (doc.exists) {
            const data = doc.data();
            score = data.score || 0;
            mainBalance = data.mainBalance || 0;
            clickPower = data.clickPower || 1;
            autoClickPower = data.autoClickPower || 0;
            upgrade1Cost = data.upgrade1Cost || 100;
            upgrade2Cost = data.upgrade2Cost || 500;
            currentEnergy = data.currentEnergy || maxEnergy;
            lastEnergyRechargeTime = data.lastEnergyRechargeTime || Date.now();
            console.log("Player data loaded for", telegramUserId);
        } else {
            console.log("No player data found for", telegramUserId, ". Starting new game.");
            lastEnergyRechargeTime = Date.now(); // –î–ª—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
        }
        updateDisplay();
        startAutoClicker();
        rechargeEnergyLogic(); // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    } catch (e) {
        console.error("Error loading player data:", e);
        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –≤—Å–µ –æ–¥–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ –≥—Ä—É –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
        updateDisplay();
        startAutoClicker();
        rechargeEnergyLogic();
    } finally {
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –µ–∫—Ä–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–∏—à–µ –ø—ñ—Å–ª—è —Å–ø—Ä–æ–±–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        loadingScreen.classList.add('hidden');
        gameScreen.classList.remove('hidden');
    }
}

async function savePlayerData() {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ Firebase —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —ñ —î —Ä–µ–∞–ª—å–Ω–∏–π telegramUserId
    if (!firebaseInitialized || !db || !telegramUserId || telegramUserId === 'test_user_local') {
        return;
    }
    try {
        await db.collection("players").doc(telegramUserId).set({
            score: Math.floor(score), // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ–ª–µ —á–∏—Å–ª–æ
            mainBalance: parseFloat(mainBalance.toFixed(2)), // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—é —Ç–æ—á–Ω—ñ—Å—Ç—é
            clickPower, autoClickPower,
            upgrade1Cost: Math.floor(upgrade1Cost),
            upgrade2Cost: Math.floor(upgrade2Cost),
            currentEnergy: Math.floor(currentEnergy),
            lastEnergyRechargeTime
        }, { merge: true });
        // console.log("Player data saved for", telegramUserId);
    } catch (e) {
        console.error("Error saving player data:", e);
    }
}

// --- Autoclicker ---
function startAutoClicker() {
    if (autoClickInterval) clearInterval(autoClickInterval);
    if (autoClickPower > 0) {
        autoClickInterval = setInterval(() => {
            score += autoClickPower;
            updateDisplay();
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç—É—Ç, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            // –î–æ–¥–∞–º–æ –∑–∞—Ç—Ä–∏–º–∫—É, —â–æ–± –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ –≤—ñ–¥ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä–∞
            // –∞–±–æ –ø–æ–∫–ª–∞–¥–∞—î–º–æ—Å—è –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π setInterval(savePlayerData, 5000);
        }, 1000); // –ö–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
    }
}

// --- Loading Screen ---
function startLoadingProgress() {
    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 5; // –ù–µ–≤–µ–ª–∏–∫–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø—Ä–∏—Ä—ñ—Å—Ç –¥–ª—è "–∂–∏–≤–æ—Å—Ç—ñ"
        if (progress > 95) progress = 95; // –ú–∞–∫—Å–∏–º—É–º 95%, —â–æ–± –æ—Å—Ç–∞–Ω–Ω—ñ 5% –¥–æ—á–µ–∫–∞–ª–∏—Å—è Firebase
        progressBarFill.style.width = `${progress}%`;
        loadingText.textContent = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è... ${Math.floor(progress)}%`;

        if (progress >= 95 && firebaseInitialized) { // –ß–µ–∫–∞—î–º–æ Firebase
            clearInterval(interval);
            // –î–∞–ª—ñ –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —ñ–≥—Ä–æ–≤–∏–π –µ–∫—Ä–∞–Ω –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ initializeGameAfterFirebase()
        }
    }, 50);
}

// --- Main Game Initialization ---
// –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ Firebase –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
async function initializeGameAfterFirebase() {
    if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.ready();
        // –Ø–∫—â–æ MainButton –ø–æ—Ç—Ä—ñ–±–Ω–∞, —Ç–æ –¥–æ–¥–∞–π—Ç–µ —ó—ó —Å—é–¥–∏
        // tg.MainButton.setText("–ì—Ä–∞—Ç–∏");
        // tg.MainButton.show();
        // tg.MainButton.onClick(() => { /* –≤–∞—à–∞ –ª–æ–≥—ñ–∫–∞ */ });

        setTimeout(() => tg.expand(), 100); // –†–æ–∑—à–∏—Ä—é—î–º–æ Web App

        if (tg.initDataUnsafe?.user?.id) {
            telegramUserId = tg.initDataUnsafe.user.id.toString();
            debugUserIdElement.textContent = "ID: " + telegramUserId;
            // console.log("Telegram User ID obtained:", telegramUserId);
        
