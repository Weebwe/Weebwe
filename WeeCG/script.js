// script.js

// --- Firebase Initialization START ---
const firebaseConfig = {
  apiKey: "AIzaSyAt5GlmmqhW6IeDd3oFB0yq2xQARd8YPNs",
  authDomain: "weegamebot-7c44b.firebaseapp.com",
  databaseURL: "https://weegamebot-7c44b-default-rtdb.firebaseio.com",
  projectId: "weegamebot-7c44b",
  storageBucket: "weegamebot-7c44b.firebasestorage.app",
  messagingSenderId: "1052981895153",
  appId: "1:1052981895153:web:0c8426bf8e5b97729a6e50"
};

function loadFirebaseScripts() {
  return new Promise((resolve, reject) => {
    const firebaseAppScript = document.createElement('script');
    firebaseAppScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js";
    firebaseAppScript.onload = () => {
      const firebaseFirestoreScript = document.createElement('script');
      firebaseFirestoreScript.src = "https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js";
      firebaseFirestoreScript.onload = resolve;
      firebaseFirestoreScript.onerror = () => reject(new Error('Failed to load firebase-firestore.js'));
      document.head.appendChild(firebaseFirestoreScript);
    };
    firebaseAppScript.onerror = () => reject(new Error('Failed to load firebase-app.js'));
    document.head.appendChild(firebaseAppScript);
  });
}

let db = null;
let app = null;

// Firebase initialization and data loading
loadFirebaseScripts().then(() => {
  app = firebase.initializeApp(firebaseConfig);
  db = firebase.firestore();
  window.db = db;
  console.log("Firebase Firestore initialized.");

  // –ü—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Firebase, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è
  loadPlayerData().then(() => {
    console.log("Player data loaded. Showing game screen.");
    // –•–æ–≤–∞—î–º–æ –µ–∫—Ä–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ —ñ–≥—Ä–æ–≤–∏–π –µ–∫—Ä–∞–Ω
    if (loadingScreen) loadingScreen.classList.add('hidden');
    if (gameScreen) gameScreen.classList.remove('hidden');
  }).catch(err => {
    console.error("Error loading player data after Firebase initialization:", err);
    updateDisplay(); // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∏—Å–ø–ª–µ–π –Ω–∞–≤—ñ—Ç—å —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    // –í—Å–µ –æ–¥–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –µ–∫—Ä–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ —ñ–≥—Ä–æ–≤–∏–π –µ–∫—Ä–∞–Ω
    if (loadingScreen) loadingScreen.classList.add('hidden');
    if (gameScreen) gameScreen.classList.remove('hidden');
  });
}).catch(err => {
  console.error("Error connecting Firebase:", err);
  updateDisplay();
  // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –µ–∫—Ä–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–≥—Ä–æ–≤–∏–π –µ–∫—Ä–∞–Ω –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ Firebase
  if (loadingScreen) loadingScreen.classList.add('hidden');
  if (gameScreen) gameScreen.classList.remove('hidden');
});

// --- Firebase Initialization END ---

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ HTML-–µ–ª–µ–º–µ–Ω—Ç–∏
const scoreElement = document.getElementById('score');
const clickButton = document.getElementById('clickButton');
const upgrade1Button = document.getElementById('upgrade1');
const upgrade1CostElement = document.getElementById('upgrade1Cost');
const upgrade2Button = document.getElementById('upgrade2');
const upgrade2CostElement = document.getElementById('upgrade2Cost');
const debugUserIdElement = document.getElementById('debugUserId');

const loadingScreen = document.getElementById('loading-screen');
const gameScreen = document.getElementById('game-screen');
const progressBarFill = document.getElementById('progressBarFill');
const loadingText = document.getElementById('loadingText');

const mainBalanceElement = document.getElementById('mainBalance');
const energyBarFill = document.getElementById('energyBarFill');
const energyText = document.getElementById('energyText');

const coinClickSound = new Audio('coin_click.mp3');
coinClickSound.volume = 0.5;

// –Ü–≥—Ä–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ
let score = 0;
let mainBalance = 0;
let clickPower = 1;
let autoClickPower = 0;
let upgrade1Cost = 100;
let upgrade2Cost = 500;
let telegramUserId = null;

let currentEnergy = 1000;
const maxEnergy = 1000;
// –ó–º—ñ–Ω–∏–≤ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏
const energyRechargeIntervalTime = 24 * 60 * 60 * 1000; // 86400000 –º—Å (24 –≥–æ–¥–∏–Ω–∏)
const energyRechargeAmount = maxEnergy; // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω—ñ—Å—Ç—é –µ–Ω–µ—Ä–≥—ñ—é —Ä–∞–∑ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏
let lastEnergyRechargeTime = 0; // –î–æ–¥–∞–Ω–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è

let autoClickInterval;
let energyRechargeInterval;

let saveTimeout = null;

// --- –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ---
function updateDisplay() {
  if (scoreElement) scoreElement.textContent = Math.floor(score);
  if (mainBalanceElement) mainBalanceElement.textContent = Math.floor(mainBalance);
  if (upgrade1CostElement) upgrade1CostElement.textContent = upgrade1Cost;
  if (upgrade2CostElement) upgrade2CostElement.textContent = upgrade2Cost;
  checkUpgradeAvailability();
  updateEnergyDisplay();
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
function updateEnergyDisplay() {
  if (!energyBarFill || !energyText || !clickButton) return;
  const percentage = (currentEnergy / maxEnergy) * 100;
  energyBarFill.style.width = `${percentage}%`;
  const icon = currentEnergy <= 0 ? 'ü™´' : 'üîã';
  energyText.textContent = `${icon} ${Math.floor(currentEnergy)} / ${maxEnergy}`;
  clickButton.disabled = currentEnergy <= 0;
  clickButton.style.opacity = currentEnergy <= 0 ? 0.7 : 1;
  clickButton.style.cursor = currentEnergy <= 0 ? 'not-allowed' : 'pointer';
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ø–≥—Ä–µ–π–¥—ñ–≤
function checkUpgradeAvailability() {
  if (upgrade1Button) upgrade1Button.disabled = score < upgrade1Cost;
  if (upgrade2Button) upgrade2Button.disabled = score < upgrade2Cost;
}

// –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó (—Ä–∞–∑ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏)
function rechargeEnergy() {
  const currentTime = Date.now();
  // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ –ø–æ–≤–Ω–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –ø—Ä–æ–π—à–ª–æ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
  if (lastEnergyRechargeTime === 0) {
    lastEnergyRechargeTime = currentTime; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤–∏–∫–ª–∏–∫—É
  } else {
    const timePassed = currentTime - lastEnergyRechargeTime;
    const fullRecharges = Math.floor(timePassed / energyRechargeIntervalTime);
    if (fullRecharges > 0) {
      currentEnergy = Math.min(currentEnergy + (fullRecharges * energyRechargeAmount), maxEnergy);
      lastEnergyRechargeTime += fullRecharges * energyRechargeIntervalTime; // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
      updateEnergyDisplay();
      debounceSavePlayerData();
    }
  }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ Firestore
async function loadPlayerData() {
  return new Promise(async (resolve, reject) => {
    if (!db) {
      console.error("Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π. (loadPlayerData)");
      updateDisplay();
      return reject(new Error("Firestore not initialized"));
    }

    if (!telegramUserId) {
      console.warn("Telegram User ID not available for load. Running in test mode.");
      telegramUserId = 'test_user_local'; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID
      updateDisplay();
      startAutoClicker(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä –Ω–∞–≤—ñ—Ç—å —É —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
      startEnergyRechargeInterval(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
      return resolve(); // –í–∏—Ä—ñ—à—É—î–º–æ, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ —Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º, —ñ –º–∏ –Ω–µ –æ—á—ñ–∫—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –ë–î
    }

    try {
      const doc = await db.collection("players").doc(telegramUserId).get();
      if (doc.exists) {
        const data = doc.data();
        score = data.score || 0;
        mainBalance = data.mainBalance || 0;
        clickPower = data.clickPower || 1;
        autoClickPower = data.autoClickPower || 0;
        upgrade1Cost = data.upgrade1Cost || 100;
        upgrade2Cost = data.upgrade2Cost || 500;
        currentEnergy = data.currentEnergy || maxEnergy;
        lastEnergyRechargeTime = data.lastEnergyRechargeTime || 0; // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —á–∞—Å
      } else {
        console.log("No player data found for", telegramUserId, ". Starting new game.");
        // –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ lastEnergyRechargeTime –ø–æ—Ç–æ—á–Ω–∏–º —á–∞—Å–æ–º
        lastEnergyRechargeTime = Date.now();
      }

      // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –µ–Ω–µ—Ä–≥—ñ—ó –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—É
      rechargeEnergy(); // –í–∏–∫–ª–∏–∫–∞—î–º–æ, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é –∑ —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è

      updateDisplay();
      startAutoClicker();
      startEnergyRechargeInterval(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
      resolve(); // –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–∞–Ω—ñ
    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è:', e);
      updateDisplay();
      reject(e); // –í—ñ–¥—Ö–∏–ª—è—î–º–æ Promise –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    }
  });
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Firestore –∑ –¥–µ–±–∞—É–Ω—Å–æ–º
function debounceSavePlayerData() {
  if (saveTimeout) clearTimeout(saveTimeout);
  saveTimeout = setTimeout(() => {
    savePlayerData();
  }, 3000); // –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥–∏
}

async function savePlayerData() {
  if (!db) {
    console.warn("Firestore –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.");
    return;
  }
  if (telegramUserId === 'test_user_local' || !telegramUserId) {
    console.warn("Cannot save data: Telegram User ID is test ID or not available. Data will not be saved.");
    return;
  }

  try {
    await db.collection("players").doc(telegramUserId).set({
      score, mainBalance, clickPower, autoClickPower,
      upgrade1Cost, upgrade2Cost, currentEnergy, lastEnergyRechargeTime // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å
    });
    console.log("Player data saved successfully.");
  } catch (e) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è:", e);
  }
}

// –ê–≤—Ç–æ–∫–ª—ñ–∫
function startAutoClicker() {
  if (autoClickInterval) clearInterval(autoClickInterval);
  if (autoClickPower > 0) {
    autoClickInterval = setInterval(() => {
      score += autoClickPower;
      mainBalance += autoClickPower; // mainBalance —Ç–∞–∫–æ–∂ –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –≤—ñ–¥ –∞–≤—Ç–æ–∫–ª—ñ–∫—É
      updateDisplay();
      debounceSavePlayerData();
    }, 1000);
  }
}

// –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó —Ä–∞–∑ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏
function startEnergyRechargeInterval() {
  if (energyRechargeInterval) clearInterval(energyRechargeInterval);
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
  // –Ø–∫—â–æ –µ–Ω–µ—Ä–≥—ñ—è –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è —Ä–∞–∑ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏, —Ç–æ —Ü–µ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–∏–º
  // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏, —á–∏ –ø—Ä–æ–π—à–ª–∏ 24 –≥–æ–¥–∏–Ω–∏
  energyRechargeInterval = setInterval(rechargeEnergy, 60 * 60 * 1000); // –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É
}

// –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –∞–Ω—ñ–º–∞—Ü—ñ—è)
function startLoadingProgress() {
  let progress = 0;
  const interval = setInterval(() => {
    progress += Math.random() * 5;
    if (progress > 99) progress = 99; // –û–±–º–µ–∂–µ–Ω–Ω—è 99%
    if (progressBarFill) progressBarFill.style.width = `${progress}%`;
    if (loadingText) loadingText.textContent = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è... ${Math.floor(progress)}%`;
    if (progress === 99) {
      clearInterval(interval);
      // –ù–µ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –µ–∫—Ä–∞–Ω —Ç—É—Ç, —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    }
  }, 50);
}

// --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π ---
if (clickButton) {
  clickButton.addEventListener('click', () => {
    if (currentEnergy > 0) {
      score += clickPower;
      mainBalance += clickPower; // mainBalance —Ç–∞–∫–æ–∂ –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –≤—ñ–¥ –∫–ª—ñ–∫—É
      currentEnergy--; // –ó–º–µ–Ω—à—É—î–º–æ –µ–Ω–µ—Ä–≥—ñ—é –Ω–∞ 1 –∑–∞ –∫–ª—ñ–∫
      coinClickSound.play().catch(e => console.error("Error playing sound:", e)); // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É
      updateDisplay();
      debounceSavePlayerData();
    } else {
      console.log("Energy is too low to click!");
      // –ú–æ–∂–ª–∏–≤–æ, –¥–æ–¥–∞—Ç–∏ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ –ø—Ä–æ –Ω–∏–∑—å–∫—É –µ–Ω–µ—Ä–≥—ñ—é
    }
  });
}

if (upgrade1Button) {
  upgrade1Button.addEventListener('click', () => {
    if (score >= upgrade1Cost) {
      score -= upgrade1Cost;
      clickPower += 1; // –ó–±—ñ–ª—å—à—É—î–º–æ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –∫–ª—ñ–∫—É
      upgrade1Cost = Math.floor(upgrade1Cost * 1.5); // –ó–±—ñ–ª—å—à—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥—É
      updateDisplay();
      debounceSavePlayerData();
    }
  });
}

if (upgrade2Button) {
  upgrade2Button.addEventListener('click', () => {
    if (score >= upgrade2Cost) {
      score -= upgrade2Cost;
      autoClickPower += 1; // –ó–±—ñ–ª—å—à—É—î–º–æ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –∞–≤—Ç–æ–∫–ª—ñ–∫—É
      upgrade2Cost = Math.floor(upgrade2Cost * 1.8); // –ó–±—ñ–ª—å—à—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥—É
      startAutoClicker(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä –∑ –Ω–æ–≤–æ—é –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é
      updateDisplay();
      debounceSavePlayerData();
    }
  });
}


// –°—Ç–∞—Ä—Ç –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
document.addEventListener('DOMContentLoaded', () => {
  if (window.Telegram && window.Telegram.WebApp) {
    const tg = window.Telegram.WebApp;
    tg.ready();
    setTimeout(() => tg.expand(), 100);
    if (tg.initDataUnsafe?.user?.id) {
      telegramUserId = tg.initDataUnsafe.user.id.toString();
      if (debugUserIdElement) debugUserIdElement.textContent = "ID: " + telegramUserId;
      console.log("Telegram User ID obtained:", telegramUserId);
    } else {
      console.warn("Telegram User ID not found in initDataUnsafe. Running in test mode.");
      telegramUserId = 'test_user_local'; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID, —è–∫—â–æ —Ä–µ–∞–ª—å–Ω–∏–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    }
  } else {
    console.warn("Telegram WebApp not detected. Running in test mode.");
    telegramUserId = 'test_user_local'; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID, —è–∫—â–æ WebApp –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ
  }

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  startLoadingProgress();
  // –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è —Ç–∞ –µ–∫—Ä–∞–Ω –ø–µ—Ä–µ–º–∏–∫–∞—î—Ç—å—Å—è –≤–∂–µ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Firebase
});
      
